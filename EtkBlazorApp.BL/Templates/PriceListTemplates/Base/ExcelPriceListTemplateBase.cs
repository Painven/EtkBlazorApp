using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace EtkBlazorApp.BL
{
    public abstract class ExcelPriceListTemplateBase : PriceListTemplateReaderBase, IPriceListTemplate
    {
        public string FileName { get;  }

        protected CancellationToken? CancelToken { get; set; }
        protected ExcelPackage Excel { get; set; }

        public ExcelPriceListTemplateBase(string fileName) { FileName = fileName; }

        public async Task<List<PriceLine>> ReadPriceLines(CancellationToken? token = null)
        {
            if (FileName.EndsWith(".xls"))
            {
                ConvertToXlsx();
            }
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            var list = new List<PriceLine>();

            await Task.Run(() =>
            {
                using (Excel = new ExcelPackage(new FileInfo(FileName)))
                {
                    if (token.HasValue && token.Value.IsCancellationRequested)
                    {
                        throw new OperationCanceledException("Отменено пользователем");
                    }

                    var readedLines = ReadDataFromExcel();
                    list.AddRange(readedLines.Where(line => line.Price.HasValue || line.Quantity.HasValue));
                }
            });

            return list;
        }

        /// <summary>
        /// Конвертация с помощью C# много зависимостей. Делаем конвертацию с помощью Python
        /// </summary>
        protected void ConvertToXlsx()
        {
            //var start = new System.Diagnostics.ProcessStartInfo();
            //start.FileName = "python";
            //start.Arguments = string.Format("\"{0}\" \"{1}\"", "xls-to-xlsx-conversion.py", FileName);
            ////start.UseShellExecute = false;// Do not use OS shell
            ////start.CreateNoWindow = true; // We don't need new window
            //start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            //start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            //using (var p = System.Diagnostics.Process.Start(start))
            //{
            //    // выполнение скрипта
            //}
        }

        protected abstract List<PriceLine> ReadDataFromExcel();

        protected ExcelWorksheet tab => Excel.Workbook.Worksheets[0]; 

    }
}
