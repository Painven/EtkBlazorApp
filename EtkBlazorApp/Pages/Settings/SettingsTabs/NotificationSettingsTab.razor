

<div id="notification_tab">
    <div id="telegram_notification_settings">
        <img src="/image/logotips/telegram.png" width="64" height="64" />
        <div>
            <input type="checkbox" id="general" @bind="generalStatus">
            <p for="general">Включить Telegram уведомления</p>
        </div>
        <div class="ml-4">
            <div class="form-group">
                <label for="price_history_min_percent">Минимальный порог уведомлений о повышении цены</label>
                <input type="number" min="1" max="99" class="form-control" id="price_history_min_percent" @bind="priceHistoryMinPercent" disabled=@isDisabled>
                <p><small style="color: darkgray;">После скольки процентов отображать товар в истории прайс-листов, и уведомлять о повышении цены на него</small></p>
            </div>
            <div>
                <input type="checkbox" id="price" @bind="priceChangedEnabled" disabled=@isDisabled>
                <p for="price">Изменение цены</p>
            </div>

            <div>
                <input type="checkbox" id="task" @bind="taskErrorEbaled" disabled=@isDisabled>
                <p for="task">Ошибка загрузки прайс-листа</p>
            </div>
            <div>
                <input type="checkbox" id="cdek" @bind="cdekOrderStatusChangedEnabled" disabled=@isDisabled>
                <p for="cdek">Изменение статуса заказа СДЭК</p>
            </div>
        </div>
    </div>


</div>

<style>
    #telegram_notification_settings {
        border: 1px solid #8a86a1;
        padding: 10px 20px;
        background: linear-gradient(45deg, #1b5f81, #239ad6);
        border-radius: 7px;
        color: white;
    }

        #telegram_notification_settings p {
            display: inline;
            margin-left: 6px;
        }
</style>

@code {
    [Inject] public ISettingStorageReader settingsReader { get; set; }
    [Inject] public ISettingStorageWriter settingsWriter { get; set; }
    [CascadingParameter] public SettingsTabData tabData { get; set; }

    bool isDisabled => !generalStatus;

    int priceHistoryMinPercent;
    bool generalStatus;
    bool priceChangedEnabled;
    bool taskErrorEbaled;
    bool cdekOrderStatusChangedEnabled;

    protected override async Task OnInitializedAsync()
    {
        generalStatus = await settingsReader.GetValue<bool>("telegram_notification_enabled");
        priceChangedEnabled = await settingsReader.GetValue<bool>("telegram_notification_price_enabled");
        taskErrorEbaled = await settingsReader.GetValue<bool>("telegram_notification_task_enabled");
        cdekOrderStatusChangedEnabled = await settingsReader.GetValue<bool>("telegram_notification_cdek_enabled");
        priceHistoryMinPercent = await settingsReader.GetValue<int>("price_list_product_price_change_percent_to_notify");


        tabData.SaveButtonClicked = new Action(async () =>
        {
            await settingsWriter.SetValue("telegram_notification_enabled", generalStatus);
            await settingsWriter.SetValue("telegram_notification_price_enabled", priceChangedEnabled);
            await settingsWriter.SetValue("telegram_notification_task_enabled", taskErrorEbaled);
            await settingsWriter.SetValue("telegram_notification_cdek_enabled", cdekOrderStatusChangedEnabled);
            await settingsWriter.SetValue<int>("price_list_product_price_change_percent_to_notify", priceHistoryMinPercent);
        });
    }
}