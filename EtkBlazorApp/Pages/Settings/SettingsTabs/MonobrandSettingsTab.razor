@using EtkBlazorApp.Core.Data
@if (monobrands != null)
{
    <div id="monobrands_tab">
        <div class="form-group">
            <label for="monobrand_update">Обновлять монобренд сайты</label>
            <input class="form-check" type="checkbox" @bind="isMonobrandUpdateEnabled" id="monobrand_update">
        </div>

        @if (isMonobrandUpdateEnabled)
        {
            <div class="row">
                <div class="btn-group">
                    <button class="btn btn-primary p-2 m-1" @onclick="AddMonobrand">
                        Добавить новый
                        <span class="oi oi-plus"></span>
                    </button>
                    <button class="btn btn-danger p-2 m-1" disabled="@(selectedMonobrand == null)" @onclick="@(e => confirmDialog.Show())">
                        Удалить
                        <span class="oi oi-delete"></span>
                    </button>
                </div>
            </div>

            <div class="row">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Вебсайт</th>
                                <th></th>
                                <th>Производитель</th>
                                <th>Валюта</th>
                                <th>Обновлять цены/остатки</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var monobrand in monobrands)
                            {
                                <tr class="@((selectedMonobrand == monobrand ? "selected-monobrand" : ""))"
                        @onclick="(e => selectedMonobrand = monobrand)">
                                    <td><input type="url" class="form-control" @bind="monobrand.WebsiteUri" /></td>
                                    <td>
                                        <a class="btn btn-sm btn-outline-primary" target="_blank" href="@monobrand.WebsiteUri">
                                            <span class="oi oi-external-link"></span>
                                        </a>
                                    </td>
                                    <td>
                                        <select class="form-control" @onchange="ManufacturerChanged">
                                            @foreach (var brandInfo in manufacturers)
                                            {
                                                <option value="@brandInfo.name"
                                        selected="@(brandInfo.name.Equals(monobrand.ManufacturerName))">
                                                    @brandInfo.name
                                                </option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control" @onchange="CurrencyCodeChanged">
                                            @foreach (var currencyCode in currencyCodeList)
                                            {
                                                <option value="@currencyCode"
                                        selected="@(currencyCode.Equals(monobrand.CurrencyCode))">
                                                    @currencyCode
                                                </option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" checked="@monobrand.IsUpdateEnabled"
                                       @onchange="MonobrandStatusChanged">
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

<DeleteConfirmDialog @ref="confirmDialog"
                     ConfirmationChanged="DialogStatusChanged"
                     ConfirmationMessage="@(() => $"Удалить монобренд {selectedMonobrand.WebsiteUri} из списка на обновления цен и остатков?")"></DeleteConfirmDialog>

@code {
    [CascadingParameter] public SettingsTabData tabData { get; set; }

    [Inject] public IManufacturerStorage manufacturerStorage { get; set; }
    [Inject] public IMonobrandStorage monobrandStorage { get; set; }
    [Inject] public IMapper mapper { get; set; }
    [Inject] public ISettingStorage settings { get; set; }
    [Inject] public NavigationManager navigationManager { get; set; }
    [Inject] public UserLogger logger { get; set; }

    DeleteConfirmDialog confirmDialog;
    List<MonobrandViewModel> monobrands = null;
    MonobrandViewModel selectedMonobrand = null;
    List<ManufacturerEntity> manufacturers = null;
    List<string> currencyCodeList = new List<string>(Enum.GetNames(typeof(CurrencyType)));
    bool isMonobrandUpdateEnabled;

    protected override async Task OnInitializedAsync()
    {
        await RefreshMonobrandList();
        manufacturers = await manufacturerStorage.GetManufacturers();

        isMonobrandUpdateEnabled = await settings.GetValue<bool>("update-monobrand-websites");

        tabData.SaveButtonClicked = new Action(async () =>
        {
            await settings.SetValue("update-monobrand-websites", isMonobrandUpdateEnabled);
        });
    }

    private async Task MonobrandStatusChanged(ChangeEventArgs e)
    {
        selectedMonobrand.IsUpdateEnabled = !selectedMonobrand.IsUpdateEnabled;
        await SaveChanges();
    }
    private async Task ManufacturerChanged(ChangeEventArgs e)
    {
        var brandInfo = manufacturers.Single(m => m.name.Equals((string)e.Value));
        selectedMonobrand.ManufacturerName = brandInfo.name;
        selectedMonobrand.ManufacturerId = brandInfo.manufacturer_id;
        await SaveChanges();
    }

    private async Task CurrencyCodeChanged(ChangeEventArgs e)
    {
        selectedMonobrand.CurrencyCode = (string)e.Value;
        await SaveChanges();
    }

    private async Task AddMonobrand()
    {
        await monobrandStorage.AddMonobrand();
        await RefreshMonobrandList();
    }

    private async Task DialogStatusChanged(bool status)
    {
        if (status)
        {
            await monobrandStorage.DeleteMonobrand(selectedMonobrand.MonobrandId);
            await logger.Write(LogEntryGroupName.ManufacturerUpdate, "Монобренд удален", $"Из списка удален монобренд: '{selectedMonobrand.WebsiteUri}'");
            monobrands.Remove(selectedMonobrand);
            selectedMonobrand = null;
        }
    }

    private async Task SaveChanges()
    {
        if (selectedMonobrand == null) { return; }
        await monobrandStorage.UpdateMonobrand(mapper.Map<MonobrandEntity>(selectedMonobrand));
    }

    private async Task RefreshMonobrandList()
    {
        monobrands = mapper.Map<List<MonobrandViewModel>>(await monobrandStorage.GetMonobrands());
    }
}
