@attribute [Authorize(Roles = "Administrator")]


<div id="user_settings_tab">

    <div class="row p-1">
        <div class="btn-group">
            <button class="btn btn-info" @onclick="@(e => addNewDialog.Show())">
                <span class="oi oi-person"></span>
                Добавить
            </button>

            @if (selectedUser != null)
            {
                <button class="btn btn-danger mx-2"
                    disabled="@(selectedUser == null || selectedUser == loginedUser)"
                    @onclick="@(e => deleteDialog.Show())">
                    <span class="oi oi-trash"></span>
                    Удалить
                </button>
            }
        </div>
    </div>

    <div class="row p-1">
        <div class="table-responsive">
            <table class="table users-table table-hover table-borderless">
                <thead class="thead-etk">
                    <tr>
                        <th>Включен</th>
                        <th>Логин</th>
                        <th>Группа</th>
                        <th>Разрешенный IP</th>
                        <th>Дата создания</th>
                        <th>Дата последнего входа</th>
                        <th>Пароль</th>
                    </tr>
                </thead>
                <tbody>
                    @if (users == null)
                    {
                        <LoadingSpinner />
                    }
                    else
                    {
                        foreach (var item in users)
                        {
                            <CascadingValue Value="@selectedUser">
                                <AppUserDisplayItem User="@item"
                                            Groups="@groups"
                                            OnItemSelect="@(e => selectedUser = item)"
                                            OnSaveChanges="@(e => UpdateUser(item))">
                                </AppUserDisplayItem>
                            </CascadingValue>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <DeleteConfirmDialog @ref="deleteDialog"
                         ConfirmationChanged="DeleteConfirmed"
                         ConfirmationMessage="@(() => $"Удалить пользователя '{selectedUser.Login}' ?")" />

    <AddNewUserDialog @ref="addNewDialog" ConfirmationChanged="AddNewUserConfirmed" />
</div>


@code {
    [Inject] public AuthenticationStateProvider stateProvider { get; set; }
    [Inject] public UserLogger logger { get; set; }
    [Inject] public IUserService userStorage { get; set; }
    [Inject] public IToastService toasts { get; set; }
    [Inject] public IMapper mapper { get; set; }

    [Parameter] public SettingsTabData tabData { get; set; }
    [CascadingParameter] public SettingsTabData selectedTab { get; set; }

    DeleteConfirmDialog deleteDialog;
    AddNewUserDialog addNewDialog;

    List<AppUserGroupEntity> groups;

    AppUser loginedUser = null;
    List<AppUser> users = null;
    public AppUser selectedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = mapper.Map<List<AppUser>>(await userStorage.GetUsers());
        groups = await userStorage.GetUserGroups();

        string loginedUserName = (await stateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        loginedUser = users.Single(u => u.Login == loginedUserName);
    }

    private async Task UpdateUser(AppUser user)
    {
        await userStorage.UpdateUser(mapper.Map<AppUserEntity>(user));
        await logger.Write(LogEntryGroupName.Accounts, "Аккаунт обновлен", user.Login);

        user.Password = null;
        user = null;
        toasts.ShowSuccess("Данные пользователя обновлены");
    }

    private async Task DeleteConfirmed(bool dialogResult)
    {
        if (dialogResult)
        {
            await userStorage.DeleteUser(selectedUser.Id);
            toasts.ShowInfo($"Пользователь удален '{selectedUser.Login}'");
            await logger.Write(LogEntryGroupName.Accounts, "Аккаунт удален", selectedUser.Login);
            users.Remove(selectedUser);
            selectedUser = null;
        }
    }

    private async Task AddNewUserConfirmed(AppUser newUser)
    {
        if (newUser == null) { return; }

        await userStorage.AddUser(mapper.Map<AppUserEntity>(newUser));
        await logger.Write(LogEntryGroupName.Accounts, "Аккаунт добавлен", newUser.Login);
        toasts.ShowSuccess("Пользователь добавлен");
        users.Add(newUser);
        selectedUser = newUser;


    }
}

