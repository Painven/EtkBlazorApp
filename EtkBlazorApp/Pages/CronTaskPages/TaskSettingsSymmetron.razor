@page "/task-settings/symmetron"
@inject ISettingStorage settings
@inject IToastService toasts
@inject ScheduleTaskManager taskManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Настройки Symmetron задачи</h3>

<div class="container">

    <div class="row">
        <div class="col-md-6 offset-3">
            <form>
                <div class="form-group">
                    <input type="checkbox" @bind="Item.enabled" class="form-check-input" />
                    <span style="font-size: 16px; color: olive; margin: 4px; color: @(Item.enabled ? "green" : "lightgray")">@(Item.enabled ? "Включено" : "Выключено")</span>
                </div>
                <div class="form-group">
                    <span>Выполнить в</span>
                    <input type="time" @bind="executionDateTime" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="imapServerFeild">Сервер</label>
                    <input type="text" class="form-control" id="imapServerFeild" placeholder="IMAP сервер" @bind="imapServer">
                </div>
                <div class="form-group">
                    <labe for="imapPortField">Порт</labe>
                    <select class="form-control" id="imapPortField" value="@imapPort">
                        <option value="143">143</option>
                        <option value="993">993</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" aria-describedby="emailHelp" placeholder="Почтовый ящик" @bind="email">
                </div>
                <div class="form-group">
                    <label for="password">Пароль</label>
                    <input type="password" class="form-control" id="password" placeholder="Пароль от почтового ящика" @bind="password">
                </div>
                <div class="btn-group" role="group" aria-label="Basic example" style="width: 100%">
                    <button type="button" style="width: 100%;" class="btn btn-secondary @(checkConnectionCss)" @onclick="CheckConnection">@checkConnectionMessage</button>
                    <button type="button" style="width: auto;" class="btn btn-primary" @onclick="SaveSettings">Сохранить</button>
                </div>
            </form>
        </div>
    </div>

    @if (isProgressBarVisible)
    {
        <IntermediateProgressBar />
    }

    <div class="row py-4">
        <button class="btn btn-outline-dark btn-lg" @onclick="@(e => confirmDialog.Show())">Выполнить сейчас</button>
    </div>
</div>

<ConfirmDialog @ref="confirmDialog"
               ConfirmationChanged="ExecuteImmediatelyDialogStatusChanged"
               ConfirmationMessage="@(() => "Выполнить задание по обновление цен Symmetron (из прайс-листа с почты) ?")"
               ConfirmationTitle="Подтверждение" />

@code {
    bool isProgressBarVisible = false;
    bool? checkConnectionState = null;

    DateTime executionDateTime;
    DateTime lastExecutionDateTime;
    TimeSpan executionTime => executionDateTime.TimeOfDay;

    string imapServer, imapPort, password, email;
    string checkConnectionMessage => checkConnectionState.HasValue ? (checkConnectionState.Value ? "Успешно" : "Ошибка соединения") : "Проверить соединение";
    string checkConnectionCss => checkConnectionState.HasValue ? (checkConnectionState.Value ? "btn-success" : "btn-danger") : string.Empty;

    ConfirmDialogBase confirmDialog;

    private CronTaskEntity Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        imapServer = await settings.GetValue("task_symmetron_imap_server");
        imapPort = await settings.GetValue("task_symmetron_imap_port");
        if (string.IsNullOrWhiteSpace(imapPort))
        {
            imapPort = "143";
        }
        email = await settings.GetValue("task_symmetron_login");
        password = await settings.GetValue("task_symmetron_password");

        Item = (await settings.GetCronTasks()).Single(t => t.details_page.Equals("symmetron"));
    }

    private async Task CheckConnection()
    {
        isProgressBarVisible = true;

        checkConnectionState = await MyImapClient.CheckConnection(imapServer, imapPort, email, password);

        isProgressBarVisible = false;
    }

    private async Task ExecuteImmediatelyDialogStatusChanged(bool dialogResult)
    {
        if (dialogResult)
        {
            isProgressBarVisible = true;

            await taskManager.ExecuteImmediately(Item.task_id);

            isProgressBarVisible = false;
        }
    }

    private async Task SaveSettings()
    {       
        await settings.SetValue("task_symmetron_imap_server", imapServer);
        await settings.SetValue("task_symmetron_imap_port", imapPort);
        await settings.SetValue("task_symmetron_login", email);
        await settings.SetValue("task_symmetron_password", password);

        await settings.UpdateCronTask(Item);

        checkConnectionState = null;
    }
}
