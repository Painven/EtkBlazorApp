@page "/cron-task/edit/silver"

@inject ISettingStorage settings
@inject IToastService toasts
@inject CronTaskService taskManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Настройки задачи</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-3">
            <div class="form-group">
                <input type="checkbox" class="form-check-input" checked="@item.enabled" @onchange="@(e => item.enabled = (bool)e.Value)" />
                <span style="font-size: 16px; color: olive; margin-left: 25px; color: @(item.enabled ? "green" : "lightgray")">@(item.enabled ? "Включено" : "Выключено")</span>
            </div>
            <div class="form-group">
                <span>Выполнить в</span>
                <input type="time" @bind="ExecutionDateTime" class="form-control" />
            </div>
            <div class="form-group">
                <label for="task-login">Логин</label>
                <input type="text" @bind="@login" class="form-control" id="task-login"/>
            </div>
            <div class="form-group">
                <label for="task-password">Пароль</label>
                <input type="password" @bind="@password" class="form-control" id="task-password"/>
            </div>
            <div class="btn-group" role="group" aria-label="Basic example" style="width: 100%">
                @if (!isProgressBarVisible)
                {
                    <button class="btn btn-outline-dark btn-lg" @onclick="@(e => confirmDialog.Show())">Выполнить сейчас</button>
                }
                <button style="width: auto;" class="btn btn-primary" @onclick="SaveSettings">Сохранить</button>
            </div>
        </div>
    </div>
    <div class="row">
        @if (isProgressBarVisible)
        {
            <IntermediateProgressBar></IntermediateProgressBar>
        }
    </div>
</div>

<ConfirmDialog @ref="confirmDialog"
               ConfirmationChanged="ExecuteImmediatelyDialogStatusChanged"
               ConfirmationMessage="@(() => $"Выполнить задание {item.name} ?")"
               ConfirmationTitle="Подтверждение" />

@code {
    private DateTime executionDateTime = new DateTime();
    private DateTime ExecutionDateTime
    {
        get => executionDateTime;
        set
        {
            executionDateTime = value;
            item.exec_time = executionDateTime.TimeOfDay;
        }
    }
    private bool isProgressBarVisible;
    private CronTaskEntity item;
    private ConfirmDialogBase confirmDialog;

    string templateGuid = "3D41DDC2-BB5C-4D6A-8129-C486BD953A3D";
    string login;
    string password;

    protected override async Task OnInitializedAsync()
    {

        item = (await settings.GetCronTasks()).Single(t => t.task_id == (int)CronTaskPrefix.Silver);
        executionDateTime = executionDateTime + item.exec_time;
        login = await settings.GetValue($"price-list-template-credentials-{templateGuid}-login");
        password = await settings.GetValue($"price-list-template-credentials-{templateGuid}-password");
    }

    private async Task ExecuteImmediatelyDialogStatusChanged(bool dialogResult)
    {
        if (dialogResult)
        {
            isProgressBarVisible = true;
            StateHasChanged();
            await taskManager.ExecuteImmediately(item.task_id);

            isProgressBarVisible = false;
        }
    }

    private async Task SaveSettings()
    {
        await settings.UpdateCronTask(item);

        await settings.SetValue($"price-list-template-credentials-{templateGuid}-login", login);
        await settings.SetValue($"price-list-template-credentials-{templateGuid}-password", password);

        toasts.ShowSuccess($"Настройки '{item.name}' сохранены");
    }
}
