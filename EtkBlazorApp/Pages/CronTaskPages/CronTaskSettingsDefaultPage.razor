@page "/cron-task/edit/{Id:int}"

@inject ICronTaskStorage settings
@inject IToastService toasts
@inject CronTaskService taskManager
@inject UserLogger userLogger
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Настройки задачи</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-3">
            <div class="form-group">
                <input type="checkbox" class="form-check-input" checked="@item.enabled" @onchange="@(e => item.enabled = (bool)e.Value)" />
                <span style="font-size: 16px; color: olive; margin-left: 25px; color: @(item.enabled ? "green" : "lightgray")">@(item.enabled ? "Включено" : "Выключено")</span>
            </div>
            <div class="form-group">
                <span>Выполнить в</span>
                <input type="time" @bind="ExecutionDateTime" class="form-control" />
            </div>
            <div class="btn-group" role="group" aria-label="Basic example" style="width: 100%">
                @if (!isProgressBarVisible)
                {
                    <button class="btn btn-outline-dark btn-lg" @onclick="@(e => confirmDialog.Show())">Выполнить сейчас</button>
                }
                <button style="width: auto;" class="btn btn-danger" @onclick="@(e => deleteDialog.Show())">Удалить это задание</button>
                <button style="width: auto;" class="btn btn-primary" @onclick="SaveSettings">Сохранить</button>
            </div>
        </div>
    </div>
    <div class="row">
        @if (isProgressBarVisible)
        {
            <IntermediateProgressBar></IntermediateProgressBar>
        }
    </div>
</div>

<ConfirmDialog @ref="confirmDialog"
               ConfirmationChanged="ExecuteImmediatelyDialogStatusChanged"
               ConfirmationMessage="@(() => $"Выполнить задание '{item.name}' ?")"
               ConfirmationTitle="Подтверждение" />

<DeleteConfirmDialog @ref="deleteDialog"
                     ConfirmationTitle="Подтверждение удаления"
                     ConfirmationMessage="@(() => $"Удалить задание '{item.name}' ?")"
                     ConfirmationChanged="TaskDeleteStatusChanged"/>
@code {
    private DateTime executionDateTime = new DateTime();
    private DateTime ExecutionDateTime
    {
        get =>
executionDateTime;
        set
        {
            executionDateTime = value;
            item.exec_time = executionDateTime.TimeOfDay;
        }
    }
    private bool isProgressBarVisible;
    private CronTaskEntity item;
    private ConfirmDialogBase confirmDialog;
    private DeleteConfirmDialog deleteDialog;

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        item = (await settings.GetCronTasks()).Single(t => t.task_id == Id);
        executionDateTime = executionDateTime + item.exec_time;
    }

    private async Task ExecuteImmediatelyDialogStatusChanged(bool dialogResult)
    {
        if (dialogResult)
        {
            isProgressBarVisible = true;
            StateHasChanged();
            await taskManager.ExecuteImmediately(item.task_id);

            isProgressBarVisible = false;

            toasts.ShowSuccess("Задание выполнено", item.name);
            await userLogger.Write(LogEntryGroupName.CronTask, "Задание выполнено (forced)", $"Задание '{item.name}' выполнено");
        }
    }

    private async Task TaskDeleteStatusChanged(bool dialogResult)
    {
        if (dialogResult)
        {
            await settings.DeleteCronTask(item.task_id);
            await taskManager.RefreshTaskList(force: true);

            string msg = $"Задание {item.name} удалено";
            toasts.ShowInfo(msg);
            await userLogger.Write(LogEntryGroupName.CronTask, "Удаление задания", msg);
            navigationManager.NavigateTo("/cron-task");
        }
    }

    private async Task SaveSettings()
    {
        await settings.UpdateCronTask(item);
        await taskManager.RefreshTaskList(force: true);

        string msg = $"Настройки задания '{item.name}' обновлены";
        toasts.ShowSuccess(msg);
        await userLogger.Write(LogEntryGroupName.CronTask, "Редактирование задания", msg);
    }
}
