@page "/tasks"
@inject ISettingStorage settings
@inject CronTaskManager taskManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Переодические задачи</h3>
@if (cronTaskList == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
<div class="table-responsive cron-task-table">
    <table class="table">
        <thead class="thead-etk">
            <tr>
                <th>Задание</th>
                <th>Запускается в</th>
                <th>Следующий через</th>
                <th>Последний запуск</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var task in cronTaskList)
            {
                <CronTaskDisplayItem Item="@task"></CronTaskDisplayItem>
            }
        </tbody>
    </table>
</div>
}

@code {
    List<CronTaskEntity> cronTaskList = null;

    protected override async Task OnInitializedAsync()
    {
        cronTaskList = await settings.GetCronTasks();
    }
} 