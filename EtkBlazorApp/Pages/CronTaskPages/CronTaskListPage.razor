@page "/cron-task"
@inject ICronTaskStorage cronTaskStorage
@inject CronTaskService taskManager
@inject UserLogger userLogger
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Administrator, Manager")]
@implements IDisposable
@using System.Timers

<h3>Переодические задачи</h3>
@if (cronTaskList == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <div class="row py-2">
        <div class="btn-group">
            <button class="btn btn-info" @onclick="ShowAddNewTaskDialog">
                <span class="oi oi-timer"></span>
                Создать новое задание
            </button>
        </div>
    </div>

    <div class="row py-2">
        <div class="table-responsive cron-task-table">
            <table class="table">
                <thead class="thead-etk">
                    <tr>
                        <th style="width: 30%">Задание</th>
                        <th style="width: 10%">Запускается в</th>
                        <th style="width: 15%">Следующий запуск</th>
                        <th style="width: 15%">Последний запуск</th>
                        <th style="width: 30%; text-align: right;">Примечание</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in cronTaskList)
                    {
                        <CronTaskDisplayItem Item="@task"></CronTaskDisplayItem>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


<GenericModalDialog @ref="dialog" TItem="CronTaskViewModel" Item="@newTask" 
                    Title="Добавление нового задания" ConfirmationChanged="NewTaskDialogStateChanged">
        <div class="form-group">
            <label for="task-name">Название</label>
            <input type="text" id="task-name" class="form-control" @bind="newTask.Title" required />
        </div>
        <div class="form-group">
            <label for="task-description">Примечание</label>
            <textarea id="task-description" @bind="newTask.Description" class="form-control" style="height: 60px; resize: none;" />
        </div>
        <div class="form-group">
            <label for="exec-time">Время запуска</label>
            <input type="text" id="exec-time" @bind="newTask.ExecTime" class="form-control" />
        </div>
        <div class="form-group">
            <label for="task-type mx-2">Тип задачи</label>
            <select id="task-type" @bind="newTask.TypeId" class="form-control">
                @foreach (var taskType in cronTaskTypes)
                {
                    <option value="@taskType.task_type_id">@taskType.name</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="price-list-template-guid mx-2">Закрепленный прайс-лист</label>
            <PriceListTemplateSelect @bind-Guid="newTask.PriceListGuid"/>
        </div>
</GenericModalDialog>

<style>

</style>

@code {
    Timer timeLeftRefresh;
    List<CronTaskViewModel> cronTaskList = null;
    GenericModalDialog<CronTaskViewModel> dialog;
    CronTaskViewModel newTask = null;
    List<CronTaskTypeEntity> cronTaskTypes = null;

    protected override async Task OnInitializedAsync()
    {
        cronTaskTypes = await cronTaskStorage.GetCronTaskTypes();

        cronTaskList = (await cronTaskStorage.GetCronTasks())
                    .Select(ct => new CronTaskViewModel()
                    {
                        Id = ct.task_id,
                        Description = ct.description,
                        ExecTime = ct.exec_time,
                        IsEnabled = ct.enabled,
                        LastExec = ct.last_exec_date_time,
                        LastExecResult = ct.last_exec_result,
                        PriceListGuid = ct.linked_price_list_guid,
                        Title = ct.name,
                        TypeId = ct.task_type_id,
                        TypeName = ct.task_type_name
                    })
                    .OrderBy(ct => ct.IsEnabled ? 0 : 1)
                    .ThenBy(ct => ct.ExecTime)
                    .ThenBy(ct => ct.Title)
                    .ToList();

        timeLeftRefresh = new Timer();
        timeLeftRefresh.Interval = TimeSpan.FromMinutes(1).TotalMilliseconds;
        timeLeftRefresh.Elapsed += (o, e) =>
        {
            InvokeAsync(() => StateHasChanged());
        };
        timeLeftRefresh.Start();
    }

    private void ShowAddNewTaskDialog()
    {
        dialog.Show();
        newTask = new CronTaskViewModel()
        {
            Title = "Заголовок",
            ExecTime = TimeSpan.FromHours(9),
            IsEnabled = true,
            TypeId = cronTaskTypes.First().task_type_id,
            TypeName = cronTaskTypes.First().name
        };
    }

    private async Task NewTaskDialogStateChanged(CronTaskViewModel item)
    {
        if (item != null)
        {
            var entity = new CronTaskEntity()
            {
                name = item.Title,
                description = item.Description,
                exec_time = item.ExecTime,
                linked_price_list_guid = item.PriceListGuid,
                task_type_id = item.TypeId
            };

            await cronTaskStorage.CreateCronTask(entity);
            navigationManager.NavigateTo("/cron-task", true);
            await taskManager.RefreshTaskList(force: true);
            await userLogger.Write(LogEntryGroupName.CronTask, "Задание добавлено", $"Добавлено новое задание '{item.Title}'");

        }
        newTask = null;
    }

    public void Dispose()
    {
        timeLeftRefresh?.Stop();
        timeLeftRefresh?.Dispose();
    }
} 