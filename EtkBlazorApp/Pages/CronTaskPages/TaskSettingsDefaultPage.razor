@page "/task-settings/{Prefix}"
@inject ISettingStorage settings
@inject IToastService toasts
@inject ScheduleTaskManager taskManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Настройки задачи</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-3">
            <form>
                <div class="form-group">
                    <input type="checkbox" @bind="isActive" class="form-check-input" />
                    <span style="font-size: 16px; color: olive; margin: 4px; color: @(isActive ? "green" : "lightgray")">@(isActive ? "Включено" : "Выключено")</span>
                </div>
                <div class="form-group">
                    <span>Выполнить в</span>
                    <input type="time" @bind="executionDateTime" class="form-control" />
                </div>
                <div class="btn-group" role="group" aria-label="Basic example" style="width: 100%">
                    <button type="button" style="width: auto;" class="btn btn-primary" @onclick="SaveSettings">Сохранить</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    bool isActive = true;

    DateTime executionDateTime;
    DateTime lastExecutionDateTime;
    TimeSpan executionTime => executionDateTime.TimeOfDay;

    [Parameter] public string Prefix { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isActive = await settings.GetValue<bool>
            ($"task_{Prefix}_active");
        executionDateTime = DateTime.Now.Date + (await settings.GetValue<TimeSpan>
            ($"task_{Prefix}_exec_time"));
        lastExecutionDateTime = (await settings.GetValue<DateTime>
            ($"task_{Prefix}_last_exec_date_time"));
    }

    private async Task SaveSettings()
    {
        await settings.SetValue($"task_{Prefix}_active", isActive);
        await settings.SetValue($"task_{Prefix}_exec_time", executionTime);
    }
}
