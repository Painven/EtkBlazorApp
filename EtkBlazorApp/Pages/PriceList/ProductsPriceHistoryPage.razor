@page "/price-list/products-price-history/{TemplateGuid}"
@using EtkBlazorApp.BL.Managers
@using System.Globalization
@attribute [Authorize(Roles = "Manager, Administrator")]



@if (historyData is null)
{
    <h1>Загрузка данных</h1>
    <LoadingSpinner />
}
else if (historyData.Data.Count == 0)
{
    <h2>Нет данных по изменению цен</h2>
}
else
{
    <div class="mx-auto d-block image-select-container m-1 p-1">
        <img src="@priceListData.Image" class="rounded image" style="width: 100%; height: 100%;" />
    </div>
    <h3>История изменения цены на товары в прайс-листе @priceListData.Title</h3>
    <div class="table-responsive">
        <table class="table table-bordered table-hover table-sm product-price-update-history-table">
            <thead>
                <tr>
                    <th rowspan="2" width="50%">Товар</th>
                    <th colspan="2">Актуальная</th>
                    <th colspan="2">Прежняя</th>
                    <th colspan="2" rowspan="2">Изменение</th>
                </tr>
                <tr>
                    <th>Дата</th>
                    <th>Цена</th>
                    <th>Дата</th>
                    <th>Цена</th>
                </tr>
            </thead>
            @foreach (var item in orderedSource)
            {
                <tr class="@(item.DateTime.Date == DateTime.Now.Date ? "today" : "")">
                    <td>
                        <a href="https://etk-komplekt.ru/index.php?route=product/product&product_id=@item.ProductId"
                   target="_blank"
                   class="btn btn-sm btn-outline-@(item.DateTime.Date == DateTime.Now.Date ? "light" : "primary") small-external-link-button">
                            <span class="oi oi-external-link"></span>
                        </a>
                        <span>@item.ProductName</span>
                    </td>
                    <td>@item.DateTime.ToString("dd.MM.yyyy")</td>
                    <td>@item.Price.ToString("0.##")</td>
                    <td>@item.PreviousItem.DateTime.ToString("dd.MM.yyyy")</td>
                    <td>@item.PreviousItem.Price.ToString("0.##")</td>
                    <td>@item.ChangePercent.ToString("P2")</td>
                    <td>@item.ChangeInCurrency.ToString("0.##")</td>
                </tr>
            }
        </table>
    </div>
}

<style>
    .product-price-update-history-table tr th {
        text-align: center;
        vertical-align: middle;
    }

    .product-price-update-history-table tr td {
        text-align: center;
        vertical-align: middle;
    }

    .product-price-update-history-table a {
        padding: 2px 5px;
        margin-right: 4px;
    }

    .product-price-update-history-table tr td:first-child {
        font-size: smaller;
        text-align: left;
    }

    .product-price-update-history-table tr.today {
        background: #ed143d;
        color: white;
    }
</style>

@code {
    [Parameter] public string TemplateGuid { get; set; }
    [Inject] public PriceListPriceHistoryManager HistoryManager { get; set; }
    [Inject] public IPriceListTemplateStorage PriceListRepository { get; set; }
    [Inject] public IMapper Mapper { get; set; }

    IEnumerable<ProductPriceChangeHistoryItem> orderedSource
    {
        get
        {
            if (historyData?.Data == null)
            {
                return new List<ProductPriceChangeHistoryItem>();
            }
            return historyData?.Data
                .OrderByDescending(i => i.DateTime.Date)
                .ThenByDescending(i => i.ChangePercent);
        }
    }
    PriceListProductPriceChangeHistory historyData;
    PriceListTemplateItemViewModel priceListData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            historyData = await HistoryManager.GetProductsPriceChangeHistoryForPriceList(TemplateGuid, getOnlyLast: false);

            priceListData = Mapper.Map<PriceListTemplateItemViewModel>(await PriceListRepository.GetPriceListTemplateById(TemplateGuid));

            StateHasChanged();
        }
    }
}
