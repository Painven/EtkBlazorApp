@page "/update-products"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject IToastService toastService
@inject ISettingStorage setting
@inject IManufacturerStorage manufacturers
@inject PriceListManager priceListManager
@inject UpdateManager databaseManager
@inject UserLogger logger

<h3>Обновление цен и остатков</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-12 my-1">
            @if (inProgress)
            {
                <IntermediateProgressBar></IntermediateProgressBar>
            }
            else
            {
                <button class="btn btn-success btn-lg mx-2"
                        @onclick="UpdateProductsPriceAndStock" disabled="@(priceListManager.PriceLines.Count == 0)">
                    Обновить
                </button>
                <span><input type="checkbox" @bind="clearStockBeforeUpdate" />  Обнулять остатки</span>
                if (clearStockBeforeUpdate && !string.IsNullOrWhiteSpace(clearStockBrandsArrayString))
                {
                    <div><small>Будут очищены остатки для следующих производителей: @clearStockBrandsArrayString</small></div>
                }
            }
        </div>
    </div>
</div>

@if (updateProgressSteps.Any())
{
    <div id="update-status">
        @foreach (var step in updateProgressSteps)
        {
            <div class="alert alert-etk" role="alert">
                @step
            </div>
        }
    </div>
}

<LoadedPriceListDisplayer></LoadedPriceListDisplayer>

@code {
    bool clearStockBeforeUpdate = false;
    bool inProgress = false;
    List<string> websiteManufacturers;
    List<string> updateProgressSteps = new List<string>();

    string clearStockBrandsArrayString
    {
        get
        {
            var priceLinesBrands = priceListManager.PriceLines.GroupBy(p => p.Manufacturer).Select(g => g.Key).OrderBy(m => m).ToList();
            var affectedBrands = priceLinesBrands.Intersect(websiteManufacturers);
            string joinedString = string.Join(", ", affectedBrands);
            return joinedString;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        websiteManufacturers = (await manufacturers.GetManufacturers())
            .Select(m => m.name)
            .ToList();

        priceListManager.OnPriceListLoaded += () => StateHasChanged();
    }

    private async Task UpdateProductsPriceAndStock()
    {
        try
        {
            updateProgressSteps.Clear();
            inProgress = true;
            StateHasChanged();

            var progress = new Progress<string>((msg) =>
            {
                updateProgressSteps.Add($"[{DateTime.Now.ToString()}] " + msg);                            
                StateHasChanged();            
            });

            await databaseManager.UpdatePriceAndStock(priceListManager.PriceLines, clearStockBeforeUpdate, progress);

            await logger.Write(LogEntryGroupName.PriceUpdate, "Выполнено", "Обновление цен выполнено");
            toastService.ShowSuccess($"Остатки и цены на сайте etk-komplekt.ru обновлены", "Информация");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"При обновлении данных произошла ошибка\r\n" + ex.Message, "Ошибка обновления");
            await logger.Write(LogEntryGroupName.PriceUpdate, "Ошибка", $"Ошибка обновления цен: {ex.Message}");
        }
        finally
        {
            inProgress = false;
        }
    }
}
