@page "/shop-account/{id}"
@inject IDatabase database
@inject IToastService toastService
@inject NavigationManager navigation
@attribute [Authorize(Roles = "Administrator")]

@if (currentAccount == null)
{
    <LoadingSpinner />
}
else
{
    @if (Id == "new")
    {
        <h2>Добавление монобренда '@currentAccount.Title'</h2>
    }
    else
    {
        <h2>Редактирование данных монобренда '@currentAccount.Title'</h2>
    }

    <EditForm Model="@currentAccount" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="row shop-account-row">
            <div class="col-md-2"><label for="title">Заголовок аккаунта</label></div>
            <div class="col-md-6"><input type="text" id="title" class="form-control" @bind-value="@currentAccount.Title" /></div>
            <div class="col-md-4"><ValidationMessage For="(() => currentAccount.Title)" /></div>
        </div>
        <div class="row shop-account-row">
            <div class="col-md-2"><label for="website_uri">URL сайта</label></div>
            <div class="col-md-6"><input type="text" id="website_uri" class="form-control" @bind-value="@currentAccount.Uri" /></div>
            <div class="col-md-4"><ValidationMessage For="(() => currentAccount.Uri)" /></div>
        </div>

        <div class="row" style="margin: 30px auto;">
            <div class="col-6">
                <h3 style="text-align: center;">База данных</h3>
                <div class="row shop-account-row">
                    <div class="col-md-2"><label for="db_host">Хост</label></div>
                    <div class="col-md-6"><input type="text" id="db_host" class="form-control" @bind-value="@currentAccount.DB_Host" /></div>
                    <div class="col-md-4"><ValidationMessage For="(() => currentAccount.DB_Host)" /></div>
                </div>
                <div class="row shop-account-row">
                    <div class="col-md-2"><label for="db_login">Логин</label></div>
                    <div class="col-md-6"><input type="text" id="db_login" class="form-control" @bind-value="@currentAccount.DB_Login" /></div>
                    <div class="col-md-4"><ValidationMessage For="(() => currentAccount.DB_Login)" /></div>
                </div>
                <div class="row shop-account-row">
                    <div class="col-md-2"><label for="db_password">Пароль</label></div>
                    <div class="col-md-6"><input type="password" id="db_password" class="form-control" @bind-value="@currentAccount.DB_Password" /></div>
                    <div class="col-md-4"><ValidationMessage For="(() => currentAccount.DB_Password)" /></div>
                </div>
            </div>
            <div class="col-6">
                <h3 style="text-align: center;">FTP</h3>
                <div class="row shop-account-row">
                    <div class="col-md-2"><label for="ftp_host">Хост</label></div>
                    <div class="col-md-6"><input type="text" id="ftp_host" class="form-control" @bind-value="@currentAccount.FTP_Host" /></div>
                    <div class="col-md-4"><ValidationMessage For="(() => currentAccount.FTP_Host)" /></div>
                </div>
                <div class="row shop-account-row">
                    <div class="col-md-2"><label for="ftp_login">Логин</label></div>
                    <div class="col-md-6"><input type="text" id="ftp_login" class="form-control" @bind-value="@currentAccount.FTP_Login" /></div>
                    <div class="col-md-4"><ValidationMessage For="(() => currentAccount.FTP_Login)" /></div>
                </div>
                <div class="row shop-account-row">
                    <div class="col-md-2"><label for="ftp_password">Пароль</label></div>
                    <div class="col-md-6"><input type="password" id="ftp_password" class="form-control" @bind-value="@currentAccount.FTP_Password" /></div>
                    <div class="col-md-4"><ValidationMessage For="(() => currentAccount.FTP_Password)" /></div>
                </div>
            </div>
        </div>
        <ValidationSummary />
        <div class="row">
            <div class="col-md-12">
                <button class="btn btn-success btn-lg" type="submit">@buttonActionName</button>
            </div>
        </div>
    </EditForm>
}



@code {

    [Parameter]
    public string Id { get; set; }

    public ShopAccountViewModel currentAccount = null;
    public string buttonActionName { get; private set; }
    private EditForm editForm;

    [Inject] DatabaseManager dbManager { get; set; }

    protected async Task OnValidSubmit()
    {
        var accountEntity = new ShopAccountEntity()
        {
            title = currentAccount.Title,
            uri = currentAccount.Uri,
            website_id = currentAccount.Id,

            db_host = currentAccount.DB_Host,
            db_login = currentAccount.DB_Login,
            db_password = currentAccount.DB_Password,

            ftp_host = currentAccount.FTP_Host,
            ftp_login = currentAccount.FTP_Login,
            ftp_password = currentAccount.FTP_Password
        };

        await database.SaveShopAccount(accountEntity);
        await dbManager.RefreshAccountList(force: true);

        if (Id == "new")
        {

            toastService.ShowInfo("Аккаунт добавлен", "Информация");
            navigation.NavigateTo("/update-products");
        }
        else
        {
            toastService.ShowInfo("Данные обновлены", "Информация");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id == "new")
        {
            currentAccount = new ShopAccountViewModel() { Title = "Заголовок", Uri = "https://site.ru" };
            buttonActionName = "Добавить данные";
        }
        else
        {
            currentAccount = await LoadViewModel();
            buttonActionName = "Обновить данные";
        }
    }

    private async Task<ShopAccountViewModel> LoadViewModel()
    {
        var account = (await database.GetShopAccounts()).Single(ac => ac.website_id == int.Parse(Id));
        var readedAccount = new ShopAccountViewModel()
        {
            Title = account.title,
            Id = account.website_id,
            Uri = account.uri,
            IsSelected = false,
            DB_Host = account.db_host,
            DB_Login = account.db_login,
            DB_Password = account.db_password,
            FTP_Host = account.ftp_host,
            FTP_Login = account.ftp_login,
            FTP_Password = account.ftp_password
        };

        return readedAccount;

    }

}
