@page "/edit-product";
@page "/edit-product/keyword/{Keyword}";

@inject IProductStorage productStorage
@inject ISettingStorage settingStorage
@inject ICurrencyChecker currencyChecker
@inject IToastService toasts
@inject UserLogger log
@attribute [Authorize]


<h3>Редактирование товара</h3>
<div class="container">
    @if (editedProduct != null)
    {
        <div class="row">
            <div class="offset-2 col-md-8">
                <form>
                    <div class="form-row" style="margin-bottom: 20px;">
                        <div class="form-group col-md-10">
                            <input type="url" class="form-control" id="product-uri" @bind="enteredUri">
                        </div>
                        <div class="form-group col-md-2">
                            <div class="btn-group">
                                <button class="btn btn-primary"
                                        style="width: 100%;"
                                        disabled="@(string.IsNullOrWhiteSpace(enteredUri))"
                                        @onclick="LoadProduct">
                                    Открыть
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="product-name">Наименование</label>
                        <input type="text" class="form-control" id="product-name" @bind="@editedProduct.Name" readonly>
                    </div>
                    <div class="form-group">
                        <label for="product-model">Модель</label>
                        <input type="text" class="form-control" id="product-model" @bind="@editedProduct.Model" readonly>
                    </div>
                    <div class="form-group">
                        <label for="product-sku">Артикул</label>
                        <input type="text" class="form-control" id="product-sku" @bind="@editedProduct.Sku" readonly>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="product-quantity">Количество</label>
                            <input type="number" class="form-control" id="product-quantity" @bind="@editedProduct.Quantity">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="product-stock-status">Статус на складе</label>
                            <select class="form-control" @bind="editedProduct.StockStatus" id="product-stock-status">
                                @foreach (var name in stockStatusNames)
                                {
                                    <option value="@name" selected="@(name == editedProduct.StockStatus)">@name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="product-price">Цена товара</label>
                            <input type="number" class="form-control" id="product-price" @bind="editedProduct.BasePrice">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="product-base-currency-code">Валюта</label>
                            <select class="form-control" id="base-currency-code" @bind="editedProduct.BasePriceCurrency">
                                @foreach (var currency in basePriceCurrencyNames)
                                {
                                    <option value="@currency" selected="@(currency == editedProduct.BasePriceCurrency)">@currency</option>
                                }
                            </select>
                        </div>
                    </div>
                    @if (hasChanges)
                    {
                        <button class="btn btn-success" style="width: 100%;" @onclick="SaveChanges">Сохранить</button>
                    }
                </form>
            </div>
        </div>
    }
</div>


@code {
    string[] basePriceCurrencyNames = Enum.GetNames(typeof(CurrencyType));
    ProductViewModel editedProduct = null;
    string[] stockStatusNames = null;
    string enteredUri = null;

    [Parameter] public string Keyword { get; set; }

    int currentStateCode = 0;
    bool hasChanges => currentStateCode != 0 && currentStateCode != GetCurrentStateCode();

    protected override async Task OnInitializedAsync()
    {
        if (Keyword != null)
        {
            enteredUri = $"https://etk-komplekt.ru/{Keyword}";
        }
        else
        {
            enteredUri = await settingStorage.GetValue("edit-product-page-last-uri");
        }
        stockStatusNames = (await productStorage.GetStockStatuses()).Select(e => e.name).ToArray();
        if (!string.IsNullOrWhiteSpace(enteredUri))
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        string keyword = new Uri(enteredUri).AbsolutePath.Trim('/', '?', '&');
        var entity = await productStorage.GetProductByKeyword(keyword);
        if (entity == null) { return; }

        editedProduct = new ProductViewModel()
        {
            Id = entity.product_id,
            Uri = $"https://etk-komplekt.ru/{entity.keyword}",
            Name = entity.name,
            Model = entity.model,
            Sku = entity.sku,
            Quantity = entity.quantity,
            Price = entity.price,
            BasePrice = entity.base_price,
            BasePriceCurrency = entity.base_currency_code,
            StockStatus = entity.stock_status
        };

        if (entity != null)
        {
            await settingStorage.SetValue("edit-product-page-last-uri", editedProduct.Uri);
        }

        currentStateCode = GetCurrentStateCode();
    }

    private async Task SaveChanges()
    {
        decimal priceInRub = editedProduct.Price;

        if (editedProduct.BasePriceCurrency != "RUB")
        {
            decimal ratio = await currencyChecker.GetCurrencyRate(Enum.Parse<CurrencyType>(editedProduct.BasePriceCurrency));
            priceInRub = Math.Round(ratio * editedProduct.BasePrice);
            editedProduct.Price = priceInRub;
        }
        else
        {
            editedProduct.BasePriceCurrency = "RUB";
            editedProduct.Price = editedProduct.BasePrice;
            editedProduct.BasePrice = 0;
        }

        var entity = new ProductEntity()
        {
            product_id = editedProduct.Id,
            price = priceInRub,
            base_price = editedProduct.BasePrice,
            base_currency_code = editedProduct.BasePriceCurrency,
            quantity = editedProduct.Quantity,
            stock_status = editedProduct.StockStatus
        };

        await productStorage.UpdateDirectProduct(entity);

        string pUri = "https://etk-komplekt.ru/index.php?route=product/product&product_id=" + editedProduct.Id;
        await log.Write(LogEntryGroupName.ProductUpdate, "Товар обновлен", editedProduct.Name + $" ({pUri})");

        currentStateCode = GetCurrentStateCode();
    }

    private int GetCurrentStateCode()
    {
        int code = 0;
        if (editedProduct != null)
        {
            code += editedProduct.Id;
            code += editedProduct.Price.GetHashCode();
            code += editedProduct.BasePrice.GetHashCode();
            code += editedProduct.Quantity.GetHashCode();
            code += (editedProduct?.StockStatus ?? string.Empty).GetHashCode();
            code += (editedProduct?.BasePriceCurrency ?? string.Empty).GetHashCode();
        }
        return code;
    }
}
