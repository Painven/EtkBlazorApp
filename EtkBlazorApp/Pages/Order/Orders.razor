@page "/orders"
@using EtkBlazorApp.Components.Controls.Orders
@attribute [Authorize(Roles = "Administrator, Manager")]

<h3>Заказы</h3>

<div class="row">
    <div class="form-inline">
        <label for="order-number">Номер заказа</label>
        <input class="form-control mx-3 my-1" type="text" id="order-number" @bind="numberFilter" />
    </div>
    <div class="form-inline">
        <label for="order-customer">Заказчик</label>
        <input class="form-control mx-3 my-1" type="text" id="order-customer" @bind="cutomerFilter">
    </div>
    <div class="form-inline">
        <label for="order-city">Город</label>
        <input class="form-control mx-3 my-1" type="text" id="order-city" @bind="cityFilter">
    </div>
    <button class="btn btn-primary py-2 px-2 mx-2 my-2" @onclick="@(() => LoadOrders())">Найти</button>
</div>
<div class="row">
    <table class="table table-hover orders-table" style="width: 100%">
        <thead class="thead-etk">
            <tr>
                <th>№ заказа</th>
                <th>Дата | Время</th>
                <th>Заказчик</th>
                <th>Город</th>
                <th>Сумма</th>
                <th>Тэги</th>
                <th>Статус</th>
                <th>Детали</th>
            </tr>
        </thead>
        <tbody>
            @if (orders == null)
            {
                @for (int i = 0; i < 100; i++)
                {
                    <tr colspan="8"><LoadingSpinner /></tr>
                }
            }
            else
            {
                @foreach (var order in orders)
                {
                    <OrderInfoRowItem OrderData="@order" />
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Inject] public IOrderStorage OrdersStorage { get; set; }
    [Inject] public IMapper Mapper { get; set; }

    List<OrderViewModel> orders = null;

    string numberFilter = null;
    string cityFilter = null;
    string cutomerFilter = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
        }
    }

    private async Task LoadOrders()
    {
        orders = null;
        StateHasChanged();

        await Task.Delay(TimeSpan.FromMilliseconds(500));

        var ordersData = await OrdersStorage.GetLastOrders(100, numberFilter, cityFilter, cutomerFilter);
        orders = Mapper.Map<List<OrderViewModel>>(ordersData);

        StateHasChanged();
    }
}
