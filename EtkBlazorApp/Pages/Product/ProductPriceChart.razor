@page "/price-list/product-price-change-chart/{product_id:int}"
@using EtkBlazorApp.Model.Chart
@using EtkBlazorApp.Model.Product

@if (product == default(ProductModel))
{
    <LoadingSpinner />
}
else if (product == null)
{
    <h1>Товар с ID: @product_id не найден</h1>
}
else if (product != null)
{
    <div class="row">
        <div class="col-md-10">
            <h1>@product.Name</h1>
            <h3>Динамика цен</h3>
        </div>
        <div class="col-md-2">
            <ProductMainImage Product=@product Size="ProductImageSize.Small" />
        </div>
    </div>
    <div class="row">
        <div class="offset-md-1 col-md-10 col-xl-8 col-sm-12">
            @if (inProgress)
            {
                <p>Загрузка данных ...</p>
            }
            <div>
                <canvas id="myChart" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int product_id { get; set; }
    [Inject] public IMapper mapper { get; set; }
    [Inject] public IProductStorage productService { get; set; }
    [Inject] public IJSRuntime js { get; set; }
    [Inject] public ChartDataExtractor dataExtractor { get; set; }

    bool inProgress = false;
    ProductModel product = new ProductModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            product = null;
            StateHasChanged();

            product = mapper.Map<ProductModel>(await productService.GetProductById(product_id));

            await GenerateChart();

        }
    }

    private async Task GenerateChart()
    {
        inProgress = true;
        StateHasChanged();
        try
        {
            var chartData = await dataExtractor.GetDataSourceForProductPriceDynamic(product_id);
            if (chartData != null)
            {
                await js.InvokeVoidAsync("GenerateChart", chartData.XAxisLabels, chartData.SeriesData);
                StateHasChanged();
            }
        }
        finally
        {
            inProgress = false;
            StateHasChanged();
        }
    }

}
