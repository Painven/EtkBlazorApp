@inject IProductStorage productsStorage
@page "/"

<h2>Последние добавленные товары</h2>
<ProductsGridDisplayer Products="@lastAddedProducts" />

<h2>Товары с наибольшей скидкой</h2>
<ProductsGridDisplayer Products="@productsWithMaxDiscount" ShowDiscountLabel="true" />

<h2>Наиболее просматриваемые товары</h2>
<ProductsGridDisplayer Products="@mostViewedProducts" ShowViewCounter="true" ShowPrice="false" />


@code {

    List<ProductViewModel> lastAddedProducts = null;
    List<ProductViewModel> productsWithMaxDiscount = null;
    List<ProductViewModel> mostViewedProducts = null;

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        lastAddedProducts = ConvertToViewModels(await productsStorage.GetLastAddedProducts(4));

        StateHasChanged();
        productsWithMaxDiscount = ConvertToViewModels(await productsStorage.GetProductsWithMaxDiscount(4));

        StateHasChanged();
        mostViewedProducts = ConvertToViewModels(await productsStorage.GetMostViewedProducts(4));
    }

    private List<ProductViewModel> ConvertToViewModels(IEnumerable<ProductEntity> dbEntities)
    {
            var viewItems = dbEntities
            .Select(entity => new ProductViewModel()
             {
                 Image = entity.image,
                 Name = HttpUtility.HtmlDecode(entity.name) ?? string.Empty,
                 Manufacturer = entity.manufacturer,
                 Price = entity.price,
                 Id = entity.product_id,
                 NumberOfViews = entity.viewed,
                 DiscountedPrice = entity.discount_price
             }).ToList();

        return viewItems;
    }

}