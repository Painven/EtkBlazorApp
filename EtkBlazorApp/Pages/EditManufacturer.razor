@page "/manufacturers";

@using EtkBlazorApp.DataAccess
@using EtkBlazorApp.Components;
@inject IManufacturerStorage _database
@inject UserLogger logger
@attribute [Authorize]


<h1>Производители</h1>
@if (manufacturers == null)
{
    <LoadingSpinner/>
}
else
{
    <h3>Список производителей на сайте</h3>
    <div class="row">
        <table class="table table-hover manufacturers-shipment-period-table" style="width: 100%">
            <thead class="thead-etk">
                <tr>
                    <th>Производитель</th>
                    <th>Срок поставки (дней)</th>
                    <th>Следующая дата поставка</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in manufacturers)
                {
                    <tr>
                        <td><a href="@item.Uri" target="_blank">@item.name</a></td>

                        @if (editManufacturer != item)
                        {
                            <td>@item.ShipmentPeriodInDays</td>
                            <td>@item.NextShipmentDate.ToShortDateString()</td>
                            <td>
                                <button class="btn-secondary btn-sm" @onclick="@(e => ChangeEditedManufacturer(item))">
                                    <span class="oi oi-pencil"></span>
                                </button>
                            </td>
                        }
                        else
                        {
                            <td><input @bind="item.ShipmentPeriodInDays" /></td>
                            <td>@item.NextShipmentDate.ToShortDateString()</td>
                            <td>
                                <button class="btn-info btn-sm" @onclick="@(e => ConfirmManufacturerChanges(item))">Подтвердить</button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {

        List<ManufacturerViewModel> manufacturers = null;
        ManufacturerViewModel editManufacturer = null;

        private void ChangeEditedManufacturer(ManufacturerViewModel manufacturer)
        {
            editManufacturer = manufacturer;
        }

        private async Task ConfirmManufacturerChanges(ManufacturerViewModel manufacturer)
        {
            var data = new ManufacturerEntity() {
                manufacturer_id = manufacturer.Id,
                shipment_period = manufacturer.ShipmentPeriodInDays
            };

            if (manufacturer.OldShipmentPeriod != manufacturer.ShipmentPeriodInDays)
            {
                await _database.SaveManufacturer(data);
                await logger.Write(LogEntryGroupName.ManufacturerUpdate, "Обновление", $"Срок поставки «{manufacturer.name}» измнен с {manufacturer.OldShipmentPeriod} на {manufacturer.ShipmentPeriodInDays} дн.");
            }
            editManufacturer = null;
            manufacturer.OldShipmentPeriod = manufacturer.ShipmentPeriodInDays;
        }

    protected override async Task OnInitializedAsync()
    {
        manufacturers = (await _database.GetManufacturers())
            .Select(model => new ManufacturerViewModel(model.manufacturer_id, model.shipment_period)
            {
                name = model.name,
                keyword = model.keyword,
                productsCount = model.productsCount
            })
            .ToList();
    }

}
