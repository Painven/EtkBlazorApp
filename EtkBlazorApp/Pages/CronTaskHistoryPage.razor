@inject ICronTaskStorage storage
@page "/cron-task-history" 
@if (historyItems == null)
{
    <LoadingSpinner/>
}
else
{
    <table id="cron-task-history-table" class="table-bordered">
        <tbody>
            @foreach (var kvp in historyItems)
            {
                <tr>
                    <td>
                        @historyItems[kvp.Key].FirstOrDefault()?.name
                    </td>
                    @for (int day = 1; day < daysInMoth; day++)
                    {
                        <td style="background: @GetLabelForTaskInDay(kvp.Key, day)"></td>
                    }
                </tr>
            }
            <tr class="footer">
                <td>
                    @DateTime.Now.ToString("MMMM")
                </td>
                @for (int day = 1; day < daysInMoth; day++)
                {
                    <td class="@(day == currentDay ? "today" : "")">@day</td>
                }
            </tr>
        </tbody>
    </table>
}

@code {
        Dictionary<int, List<CronTaskHistoryEntity>> historyItems;

        int currentDay;
        int currentMonth;
        int currentYear;
        int daysInMoth;

    protected override void OnInitialized()
    {
        currentDay = DateTime.Now.Day;
        currentMonth = DateTime.Now.Month;
        currentYear = DateTime.Now.Year;
        daysInMoth = DateTime.DaysInMonth(currentYear, currentMonth);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            historyItems = (await storage.GetHistoryDataForMonth())
            .GroupBy(h => h.task_id)
            .ToDictionary(t => t.Key, t => t.ToList());
            StateHasChanged();
        }
    }

    private string GetLabelForTaskInDay(int id, int day)
    {
        var findedItem = historyItems[id].FirstOrDefault(t => t.date_time.Date == new DateTime(currentYear, currentMonth, day));

        if (findedItem != null)
        {
            return findedItem.exec_result ? "#50C878" : "darkred";
        }

        if (day > currentDay)
        {
            return "#ececec";
        }

        return "transparent";
    }

}
