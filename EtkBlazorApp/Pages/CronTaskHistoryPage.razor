@inject ICronTaskStorage storage
@page "/cron-task-history" 
@if (historyItems == null)
{
    <LoadingSpinner/>
}
else
{
    <table id="cron-task-history-table" class="table-bordered">
        <tbody>
            @foreach (var kvp in historyItems)
            {
                <tr>
                    <td>
                        @historyItems[kvp.Key].FirstOrDefault()?.name
                    </td>
                    @for (int day = 1; day < daysInMoth; day++)
                    {
                        <td class="@GetCellClassForTaskInDay(kvp.Key, day)"></td>
                    }
                </tr>
            }
            <tr class="footer">
                <td>
                    @DateTime.Now.ToString("MMMM")
                </td>
                @for (int day = 1; day < daysInMoth; day++)
                {
                    <td class="@(day == currentDay ? "today" : "")">@day</td>
                }
            </tr>
        </tbody>
    </table>
}
<style>
    #cron-task-history-table td.success {
        background: #50C878;
    }
    #cron-task-history-table td.failed {
        background: #8b0000;
    }
    #cron-task-history-table td.many-results {
        background: linear-gradient( 45deg, #50C878 50%, 0%, #8b0000 50%);
    }
    #cron-task-history-table td.in-future {
        background: #ececec;
    }
    #cron-task-history-table td.empty {
        background: #fff;
    }

    #cron-task-history-table td:first-child {
        font-size: 16px;
        font-weight: bold;
        text-align: right;
        width: auto;
        white-space: pre;
        margin: 4px 10px 4px 2px;
        padding: 6px 12px;
    }

    #cron-task-history-table td:not(:first-child) {
        width: 43px;
        height: 44px;
        text-align: center;
        vertical-align: middle;
    }

    #cron-task-history-table .today {
        background: blue;
        color: white;
        font-weight: bold;
    }
</style>

@code {
    Dictionary<int, List<CronTaskHistoryEntity>> historyItems;

    int currentDay;
    int currentMonth;
    int currentYear;
    int daysInMoth;

    protected override void OnInitialized()
    {
        currentDay = DateTime.Now.Day;
        currentMonth = DateTime.Now.Month;
        currentYear = DateTime.Now.Year;
        daysInMoth = DateTime.DaysInMonth(currentYear, currentMonth);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            historyItems = (await storage.GetHistoryDataForMonth())
            .GroupBy(h => h.task_id)
            .ToDictionary(t => t.Key, t => t.ToList());
            StateHasChanged();
        }
    }

    private string GetCellClassForTaskInDay(int id, int day)
    {
        if (day > currentDay)
        {
            return "in-future";
        }

        var items = historyItems[id].Where(t => t.date_time.Date == new DateTime(currentYear, currentMonth, day));

        if (items.Any())
        {
            bool allSuccess = items.All(item => item.exec_result == true);
            bool allFailed = items.All(item => item.exec_result == false);
            bool bothResulsts = allSuccess == false && allFailed == false;

            if (allSuccess)
            {
                return "success";
            }
            if (allFailed)
            {
                return "failed";
            }
            if (bothResulsts)
            {
                return "many-results";
            }
        }

        return "empty";
    }

}
