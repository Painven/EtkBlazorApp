@page "/ozon"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject IToastService toasts
@inject IManufacturerStorage manufacturerStorage
@inject ISettingStorage settings
@inject OzonSellerManager ozonManager

@if (orderedDiscountInfoSource == null)
{
    <LoadingSpinner />
}
else
{
    <h3>Ozon Seller</h3>
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <div class="row">
                <div class="col-md-6 col-sm-6">
                    @if (isUpdateInProgress)
                    {
                        <IntermediateProgressBar></IntermediateProgressBar>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary btn-lg"
                                @onclick="UpdateOzonButtonClick"
                                disabled="@updateButtonDisabled">
                            Обновить цены и остатки
                        </button>
                    }
                    <p>Последнее обновление: <storng>@lastUpdateDateTime</storng></p>
                </div>
            </div>
            <div class="row">
                <div class="ozon-manufacturer-discount-list col-sm-12">
                    <div class="row">
                        <div class="col-md-9">Производитель</div>
                        <div class="col-md-3">Наценка от сайта</div>
                    </div>
                    @foreach (var item in orderedDiscountInfoSource)
                    {
                        <OzonManufacturerDiscountItem Item="item" ItemChanged="ItemStateChanged" />
                    }
                </div>
            </div>
        </div>
    </div>
}

<ConfirmDialog @ref="confirmDialog" 
               ConfirmationChanged="ConfirmStateChanged"
               ConfirmationMessage="@(() => "Сегодня обновление уже выполнялось. Выполнить еще раз ?")"></ConfirmDialog>

@code {
    bool isUpdateInProgress = false;
    bool updateButtonDisabled => discountsInfoSource.All(m => m.IsChecked == false);
    DateTime lastUpdateDateTime;

    ConfirmDialog confirmDialog;

    private List<OzonManufacturerDiscountViewModel> discountsInfoSource = null;
    private List<OzonManufacturerDiscountViewModel> orderedDiscountInfoSource
    {
        get
        {
            return discountsInfoSource == null ? null : discountsInfoSource
            .OrderByDescending(d => d.IsChecked)
            .ThenBy(d => d.Manufacturer)
            .ToList();
        }
    }

    private async Task ItemStateChanged()
    {
        var source = discountsInfoSource
            .Where(m => m.IsChecked)
            .OrderBy(m => m.Manufacturer)
            .Select(m => $"{m.Manufacturer}={m.Discount}")
            .ToList();

        var checkedData = string.Join(";", source);
        await settings.SetValue("ozon_seller_manufacturer_discounts", checkedData);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var manufacturers = await manufacturerStorage.GetManufacturers();
        string rawArray = await settings.GetValue("ozon_seller_manufacturer_discounts");
        var mDiscount = string.IsNullOrWhiteSpace(rawArray) ?
            new Dictionary<string, decimal>() :
            rawArray.Split(";").Select(chunk => chunk.Split("=")).ToDictionary(x => x[0], x => decimal.Parse(x[1]));

        discountsInfoSource = manufacturers
            .Select(manufacturer => new OzonManufacturerDiscountViewModel(manufacturer.name)
            {
                Id = manufacturer.manufacturer_id,
                Discount = mDiscount.ContainsKey(manufacturer.name) ? mDiscount[manufacturer.name] : 0,
                IsChecked = mDiscount.ContainsKey(manufacturer.name)
            })
            .ToList();

        await RefreshLastUpdateLabel();
    }

    private async Task UpdateOzonButtonClick()
    {
        if(lastUpdateDateTime.Date == DateTime.Now.Date)
        {
            confirmDialog.Show();
        }
        else
        {
            await ConfirmStateChanged(status: true);
        }
    }

    private async Task RefreshLastUpdateLabel()
    {
        lastUpdateDateTime = await settings.GetValue<DateTime>("ozon_seller_last_update");
    }

    private async Task ConfirmStateChanged(bool status)
    {
        if (status)
        {
            try
            {
                isUpdateInProgress = true;
                StateHasChanged();
                await ozonManager.Update();
                toasts.ShowSuccess("Обновление выполнено");
            }
            catch (Exception ex)
            {
                toasts.ShowError(ex.Message);
            }
            finally
            {
                isUpdateInProgress = false;
            }

            await RefreshLastUpdateLabel();
        }
    }
}