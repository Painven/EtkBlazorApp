@page "/ozon"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject IToastService toasts
@inject IOzonSellerDiscountStorage discountStorage
@inject ISettingStorage settingStorage
@inject UserLogger logger

<img style="height: 100px; margin: 0px auto 40px auto; display: block;"
     src="image/logotips/ozon-seller-logo-big.png"
     class="img-fluid" />

@if (discountsInfoSource == null)
{
    <LoadingSpinner />
}
else
{
<div class="container">
    <div class="row">
        <div class="col-md-8" style="margin: 0px auto;">
            <p style="display: inline-block;">Последнее обращение к файлу: <strong>@lastRequestString</strong></p>
            <button class="btn btn-info mx-2" @onclick="(() => showSettingsBox = !showSettingsBox)" style="display: inline-block;">
                <span class="oi oi-cog px-1"></span>
                @(!showSettingsBox ? "Показать меню настроек" : "Скрыть меню настроек")
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8" style="margin: 0px auto;">
            <ul class="list-group my-2" hidden="@(!showSettingsBox)">
                <li class="list-group-item">
                    <label for="min_export_price">Минимальная цена для выгрузки</label>
                    <input type="number" min="0" class="form-control" id="min_export_price" style="display: inline-block; width: 140px;"
                           value="@minimumPrice" @onchange="@(e => ChangeMinimumPrice(e.Value.ToString()))">
                </li>
                @*<li class="list-group-item">
                    <StocksCheckListBox CheckedAllTitle="Остатки из всех складов" 
                                        CheckedStateChanged="SaveOzonCheckedStocks"/>
                </li>*@
            </ul>
        </div>
    </div>

    <div class="row">
        <div class="ozon-manufacturer-discount-list col-md-8 col-sm-12">
            <div class="row">
                <div class="col-md-9">Производитель</div>
                <div class="col-md-3">Наценка от сайта</div>
            </div>
            @foreach (var item in discountsInfoSource)
                {
            <OzonManufacturerDiscountItem Item="item" ItemChanged="ItemStateChanged" />
                }
        </div>
    </div>
</div>
}

@code {

    private List<OzonManufacturerDiscountViewModel> discountsInfoSource = null;
    decimal minimumPrice;
    bool showSettingsBox = false;

    DateTime lastRequest;
    string lastRequestString
    {
        get
        {
            if(lastRequest.Date == DateTime.Now.Date)
            {
                return $"сегодня в {lastRequest.ToString("HH\\:mm")}";
            }

            return lastRequest.ToString();
        }
    }

    private async Task ItemStateChanged(OzonManufacturerDiscountViewModel item)
    {
        await discountStorage.SaveDiscount(new OzonSellerManufacturerDiscountEntity()
        {
            manufacturer_id = item.Id,
            discount = item.Discount,
            enabled = item.IsChecked
        });
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            discountsInfoSource = (await discountStorage.GetManufacturerDiscounts())
                .Select(entity => new OzonManufacturerDiscountViewModel(entity.manufacturer_name)
                {
                    Id = entity.manufacturer_id,
                    Discount = entity.discount,
                    IsChecked = entity.enabled
                })
                .OrderByDescending(item => item.IsChecked)
                .ToList();

            lastRequest = await settingStorage.GetValue<DateTime>("ozon_seller_last_request");
            minimumPrice = await settingStorage.GetValue<decimal>("ozon_seller_export_minimum_price");

            StateHasChanged();
        }
    }

    private async Task ChangeMinimumPrice(string newValue)
    {
        if (decimal.TryParse(newValue, out var minPrice))
        {
            minimumPrice = minPrice;
            await settingStorage.SetValue("ozon_seller_export_minimum_price", minimumPrice);
            await logger.Write(LogEntryGroupName.Ozon, "Настройки изменены", $"Минимальная цена выгрузки изменена на {minimumPrice}");
        }
    }

    private async Task SaveOzonCheckedStocks(Dictionary<StockName, bool> stocks)
    {
        string joinedArray = stocks.All(kvp => kvp.Value) ? "all" : string.Join(",",  stocks.Where(kvp => kvp.Value).Select(kvp => (int)kvp.Key));
        await settingStorage.SetValue("ozon_seller_checked_stocks", joinedArray);
    }

}