@page "/ozon"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject IToastService toasts
@inject IOzonSellerDiscountStorage discountStorage
@inject ISettingStorage settingStorage
@inject UserLogger logger

<img style="height: 100px; margin: 0px auto 40px auto; display: block;"
     src="image/logotips/ozon-seller-logo-big.png"
     class="img-fluid" />

@if (discountsInfoSource == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-md-8" style="margin: 0px auto;">
                <p>Последнее обращение к файлу: <strong>@lastRequestString</strong></p>
            </div>
        </div>
        <div class="row">          
            <div class="ozon-manufacturer-discount-list col-md-8 col-sm-12">
                <div class="row">
                    <div class="col-md-9">Производитель</div>
                    <div class="col-md-3">Наценка от сайта</div>
                </div>
                @foreach (var item in discountsInfoSource)
                {
                    <OzonManufacturerDiscountItem Item="item" ItemChanged="ItemStateChanged" />
                }
            </div>
        </div>
    </div>
}

@code {

    private List<OzonManufacturerDiscountViewModel> discountsInfoSource = null;
    DateTime lastRequest;
    string lastRequestString
    {
        get
        {
            if(lastRequest.Date == DateTime.Now.Date)
            {
                return $"сегодня в {lastRequest.ToString("HH\\:mm")}";
            }

            return lastRequest.ToString();
        }
    }

    private async Task ItemStateChanged(OzonManufacturerDiscountViewModel item)
    {
        await discountStorage.SaveDiscount(new OzonSellerManufacturerDiscountEntity()
        {
            manufacturer_id = item.Id,
            discount = item.Discount,
            enabled = item.IsChecked
        });
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            discountsInfoSource = (await discountStorage.GetManufacturerDiscounts())
            .Select(entity => new OzonManufacturerDiscountViewModel(entity.manufacturer_name)
            {
                Id = entity.manufacturer_id,
                Discount = entity.discount,
                IsChecked = entity.enabled
            })
            .OrderByDescending(item => item.IsChecked)
            .ToList();

            lastRequest = await settingStorage.GetValue<DateTime>("ozon_seller_last_request");

            StateHasChanged();
        }
    }

}