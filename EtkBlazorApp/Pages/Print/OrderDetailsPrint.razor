@page "/order/{id:int}/print"
@inject IOrderStorage orders
@layout PrintBlankLayout

@if (order != null)
{
<h1>Заказ @Id от @order.DateTime</h1>
<p style="font-size: 18px;"><strong>Заказчик:</strong> @order.Customer</p>
<p><strong>Телефон:</strong> @order.CustomerPhoneNumber</p>
<p><strong>Email:</strong> @order.CustomerEmail</p>
<p><strong>Метод оплаты:</strong> @order.PaymentMethod</p>
<p><strong>Адрес доставки:</strong> @order.ShippingAddress</p>
<p><strong>Метод доставки:</strong> @order.ShippingMethod</p>
<p><strong>Город:</strong> @order.City</p>
<p><strong>Примечание к заказу:</strong> @order.Comment</p>

<h2>Заказ</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Производитель</th>
            <th>Товар</th>
            <th>Модель</th>
            <th>Артикул</th>
            <th>Цена (за ед., на момент заказа)</th>
            <th>Количество</th>
            <th>Сумма</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in order.OrderDetails)
        {
            <tr>
                <td>@item.Manufacturer</td>
                <td>@item.ProductName</td>
                <td>@item.Model</td>
                <td>@item.Sku</td>
                <td>@item.Price.ToString("C0")</td>
                <td>@item.Quantity</td>
                <td>@item.Sum.ToString("C0")</td>
            </tr>
        }
        <tr>
            <td colspan="7" style="text-align: right; font-size: 18px; color: red; font-weight: bold">Доставка @order.ShipmentCost.ToString("C0")</td>
        </tr>
        <tr>
            <td style="text-align: right; font-size: 24px; color: red; font-weight: bold">ИТОГО @order.TotalPrice.ToString("C0")</td>
        </tr>
    </tbody>
</table>
}


@code {
    [Parameter]
    public int Id { get; set; }

    OrderViewModel order = null;

    protected override async Task OnInitializedAsync()
    {
        var oe = await orders.GetOrderById(Id);
        var detailsEntity = await orders.GetOrderDetails(Id);

        var orderData = new OrderViewModel()
        {
            OrderId = oe.order_id.ToString(),
            City = oe.payment_city,
            Customer = oe.payment_firstname,
            DateTime = oe.date_added,
            OrderStatus = oe.order_status,
            TotalPrice = oe.total,
            Comment = oe.comment,
            CustomerEmail = oe.email,
            CustomerPhoneNumber = oe.telephone,
            ShippingAddress = oe.shipping_address_1,
            PaymentMethod = oe.payment_method,
            ShippingMethod = oe.shipping_method,
            OrderDetails = detailsEntity.Select(ode => new OrderDetailsViewModel()
            {
                ProductName = ode.name,
                Model = ode.model,
                Sku = ode.sku,
                Price = ode.price,
                ProductId = ode.product_id,
                Quantity = ode.quantity,
                Manufacturer = ode.manufacturer
            }).ToList()
        };

        order = orderData;
    }
}
