@page "/tasks"
@inject ISettingStorage settings
@inject TaskScheduleManager taskManager

<h3>Переодические задачи</h3>
<div class="row" disabled>
    <span style="margin: auto 0px;">Время выполнения заданий</span>
    <input type="time" value="@executionTime" class="task-time-picker" @onchange="ExecTimeChanged" disabled="@timePickerDisabled" />
    @if (!timePickerDisabled)
    {
        <p class="next-execution">(следующее выполнение через: <span style="color: red;">@nextRunTime.ToString(@"h\:mm")</span></p>
    }
</div>

@if (taskManager.LastExecution.HasValue)
{
    <p class="last-execution">Последний запуск: <span style="color: red;">@(taskManager.LastExecution.Value.ToString("dd.MM.yyyy HH:mm"))</span></p>
}

<hr />
<ul class="timer-task-list">
    <li>
        <input type="checkbox" @bind="@(enableStatus["Symmetron"])" disabled />
        <a href="/symmetron-task-settings"><span class="oi oi-cog cog-icon" aria-hidden="true"></span></a>
        <span>Symmetron</span>

    </li>
    <li>
        <input type="checkbox" @bind="@(enableStatus["Silver"])" disabled />
        <a href="/silver-task-settings"><span class="oi oi-cog cog-icon" aria-hidden="true"></span></a>
        <span>Silver</span>

    </li>
    <li>
        <input type="checkbox" @bind="@(enableStatus["1C"])" disabled />
        <a href="/task-settings-1c"><span class="oi oi-cog cog-icon" aria-hidden="true"></span></a>
        <span>1C</span>
    </li>
    <li>
        <input type="checkbox" @bind="@(enableStatus["Prist"])" disabled />
        <a href="/task-settings-prist"><span class="oi oi-cog cog-icon" aria-hidden="true"></span></a>
        <span>Прист</span>
    </li>
</ul>
<hr />

<div class="row">
    @if (taskManager.InProgress)
    {
        <IntermediateProgressBar />
    }
    <button class="btn btn-outline btn-lg" @onclick="ForceRun">Выполнить все активные задания немедленно</button>
</div>

<style>
    .last-execution {
        color: lightgray;
        margin: 4px auto;
        font-size: 10px;
    }
    .next-execution {
        color: lightgray;
        margin: 4px 4px;
        font-size: 10px;
    }

    .task-time-picker {
        margin: 4px;
        border: 1px solid #ffa5fd;
    }

    .timer-task-list {
        list-style-type: none;
    }

        .timer-task-list input {
            transform: scale(1.35);
        }

        .timer-task-list .cog-icon {
            color: gray;
            font-size: 18px;
            margin: 2px 8px;
        }

        .timer-task-list li {
            font-size: 18px;
            font-family: Tahoma;
            color: olive;
            line-height: 32px;
            margin: 6px 12px 6px 2px;
            border-bottom: 1px solid #ffa5fd;
        }
</style>

@code {
    TimeSpan executionTime = TimeSpan.FromHours(3);
    DateTime? lastExecution;

    bool isInProgress = true;
    Dictionary<string, bool> enableStatus;

    bool timePickerDisabled => enableStatus.All(kvp => !kvp.Value);

    TimeSpan nextRunTime =>
        executionTime < DateTime.Now.TimeOfDay ?
        (DateTime.Now.AddDays(1).Date.AddTicks(executionTime.Ticks) - DateTime.Now) :
        DateTime.Now.TimeOfDay - executionTime;

    protected override async Task OnInitializedAsync()
    {
        enableStatus = new Dictionary<string, bool>()
        {
            ["Symmetron"] = (await settings.GetValue<bool>("task_symmetron_active")),
            ["Silver"] = (await settings.GetValue<bool>("task_silver_active")),
            ["Prist"] = (await settings.GetValue<bool>("task_prist_active")),
            ["1C"] = (await settings.GetValue<bool>("task_1c_active")),
        };

        if (DateTime.TryParse(await settings.GetValue("task_last_exec_date_time"), out var dt))
        {
            lastExecution = dt;
        }
        if (TimeSpan.TryParse(await settings.GetValue("task_exec_time"), out var time))
        {
            executionTime = time;
        }

        taskManager.ProgressStatusChanged += () => StateHasChanged();
    }

    private async Task ExecTimeChanged(ChangeEventArgs e)
    {
        await settings.SetValue("task_exec_time", (TimeSpan)e?.Value);
    }

    private async Task ForceRun()
    {
        await taskManager.ExecuteAll();
    }
}
