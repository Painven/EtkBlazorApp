@page "/login"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigation
@inject ProtectedLocalStorage localStorage
@inject IToastService toastService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor

<center style="background: linear-gradient(to right, #4bddc4 0%, #466085); padding: 20px 0px;">
    <div class="container">
        <div class="row">
            <div class="col-md-4 col-sm-12">
                <img src="./image/logotips/etk-logo.png" style="width: 100%; height: auto;" />
            </div>

            <div class="col-md-8 col-sm-12">
                <EditForm Model="@user" OnValidSubmit="@ValidateUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <h3 style="color: white;">Авторизация</h3>
                    </div>
                    <div class="col-md-12" style="margin: 10px 20px">
                        <input class="form-control col-12" @bind="user.Login" placeholder="Логин" />
                    </div>
                    <div class="col-md-12" style="margin: 10px 20px">
                        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="Пароль" />
                    </div>
                    <div class="col-md-12" style="margin: 10px 20px">
                        <input type="submit" class="form-control col-12 btn btn-success" value="Войти" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</center>

@code {

    private AppUser user = new AppUser();

    private async Task<bool> ValidateUser()
    {
        user.UserIP = contextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
        await ((MyCustomAuthProvider)authenticationStateProvider).AuthenticateUser(user);

        navigation.NavigateTo("/");

        await localStorage.SetAsync("user_login", user.Login);
        await localStorage.SetAsync("user_password", user.Password);

        return await Task.FromResult(true);
    }

}
