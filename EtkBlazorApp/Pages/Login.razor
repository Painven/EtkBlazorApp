@page "/login"
@using Microsoft.AspNetCore.Http
@inject ILogStorage log
@inject IHttpContextAccessor httpContext
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigation
@inject ProtectedLocalStorage localStorage
@inject UserLogger userLogger

<center style="background: linear-gradient(to right, #4bddc4 0%, #466085); padding: 20px 0px;">
    <div class="container">
        <div class="row">
            <div class="col-md-4 col-sm-12">
                <img src="./image/logotips/etk-logo.png" style="width: 100%; height: auto;" />
            </div>

            <div class="col-md-8 col-sm-12">
                <form>
                    <div>
                        <h3 style="color: white;">Авторизация</h3>
                    </div>
                    <div class="col-md-12" style="margin: 10px 20px">
                        <input class="form-control col-12" @bind="user.Login" placeholder="Логин" />
                    </div>
                    <div class="col-md-12" style="margin: 10px 20px">
                        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="Пароль" />
                    </div>
                    <div class="col-md-12" style="margin: 10px 20px">
                        <button type="button" @onclick="Enter" class="form-control col-12 btn btn-success" value="Войти">
                            Войти
                        </button>
                        @if (isInvalidData)
                        {
                        <p style="margin-top: 4px; background: rgba(0,0,0,0.25);">
                            <strong style="color: red; font-size: 14px;">Неверный логин или пароль!</strong>
                        </p>
                        }
                    </div>
                </form>
            </div>
        </div>
    </div>
</center>

@code {

    private AppUser user = new AppUser();
    bool isInvalidData = false;

    private async Task Enter()
    {
        user.UserIP = httpContext.HttpContext.Connection?.RemoteIpAddress.ToString();

        isInvalidData = false;

        await ((MyCustomAuthProvider)authenticationStateProvider).AuthenticateUser(user);

        navigation.NavigateTo("/");
        await localStorage.SetAsync("user_login", user.Login);
        await localStorage.SetAsync("user_password", user.Password);

        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.IsAuthenticated)
        {
            await userLogger.Write(LogEntryGroupName.Auth, "Вход", $"Пользователь вошел. IP {user.UserIP}");
        }
        else
        {
            await log.Write(new LogEntryEntity()
            {
                group_name = LogEntryGroupName.Auth.GetDescriptionAttribute(),
                title = "Ошибка входа",
                message = $"Вход не выполнен. Логин ({user.Login}) Пароль ({user.Password}) IP ({user.UserIP})",
                user = "Не авторизован",
                date_time = DateTime.Now
            });
            isInvalidData = true;
        }
    }

}
