@page "/accounts"
@inject IAuthenticationDataStorage userStorage
@inject IToastService toasts
@attribute [Authorize(Roles = "Administrator")]
@inject AuthenticationStateProvider stateProvider
@inject UserLogger logger 

<h3>Учетные записи</h3>

<div class="row" style="padding: 15px;">
    
    <div class="form-inline">
        @if (newUser == null)
        {
            <button class="btn btn-sm btn-success" @onclick="@(e => newUser = new AppUser() { IsEnabled = true, GroupName = groups.First() })">
                <span class="oi oi-plus"></span>
                Добавить
            </button>
        }
        else
        {
            <button class="btn btn-sm btn-primary" @onclick="SaveNewUser">
                <span class="oi oi-plus"></span>
                Сохранить
            </button>
        }
    </div>
    @if (newUser != null)
    {
        <div class="form-inline mx-4 px-2">
            <label for="new-user-login">Логин</label>
            <input type="text" class="form-control mx-1" id="new-user-login" @bind="newUser.Login" />
        </div>
        <div class="form-inline mx-4 px-2">
            <label for="new-user-password">Пароль</label>
            <input type="text" class="form-control mx-1" id="new-user-password" @bind="newUser.Password" />
        </div>
        <div class="form-inline mx-4 px-2" style="padding-right: 12px;">
            <label for="new-user-group">Группа</label>
            <select class="form-control mx-1" @onchange="@(e => newUser.GroupName = (string)e.Value)" id="new-user-group">
                @foreach (var gName in groups)
                {
                    <option value="@gName" selected="@(newUser.GroupName == gName)">@gName</option>
                }
            </select>
        </div>
    }
</div>
<div class="table-responsive">
    <table class="table users-table">
        <thead class="thead-etk">
            <tr>
                <th>Включен</th>
                <th>Логин</th>
                <th>Группа</th>
                <th>Разрешенный IP</th>
                <th>Дата создания</th>
                <th>Дата последнего входа</th>
                <th>Пароль</th>
                <th>Удалить</th>
                <th>Сохранить</th>
            </tr>
        </thead>
        <tbody>
            @if (users != null)
            {
                @foreach (var item in users)
                {
                <tr class="@(item.IsEnabled ? "enabled-user": "disabled-user")">
                    <td>
                        <input type="checkbox" class="form-check" @bind="item.IsEnabled" />
                    </td>
                    <td>@item.Login</td>
                    <td>
                        <select class="form-control" @onchange="@(e => item.GroupName = (string)e.Value)" >
                            @foreach (var gName in groups)
                            {
                                <option value="@gName" selected="@(gName == item.GroupName)">@gName</option>
                            }
                        </select>
                    </td>
                    <td>
                        @if (!item.HasAllowedIp)
                        {
                            <input type="checkbox" checked="checked" class="form-check" style="display: inline;"
                                   @onchange="@(e => item.HasAllowedIp = true)" />
                             <label style="display: inline;">Все</label>
                        }
                        else
                        {
                            <input type="text" class="form-control"  maxlength="15" @bind="@item.AllowedIp" />
                        }
                    </td>
                    <td>@item.CreatingDate</td>
                    <td>@item.LastLoginDateTime</td>
                    <td>
                        @if (editUser == item)
                        {
                            <input type="password" class="form-control" @bind="item.Password" />
                        }
                        else
                        {
                            <button class="btn btn-secondary btn-sm" @onclick="@(e => editUser = item)">
                                <span class="oi oi-pencil"></span>
                            </button>
                        }
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" 
                                @onclick="@(e => ShowDeleteUserDialog(item))"><span class="oi oi-x"></span></button>
                    </td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="@(e => UpdateUser(item))"><span class="oi oi-check"></span></button>
                    </td>
                </tr>
                }
            }
        </tbody>
    </table>
</div>

<DeleteConfirmDialog @ref="deleteConfirmDialog" 
                     ConfirmationChanged="DeleteConfirmed"
                     ConfirmationMessage="@(() => $"Удалить пользователя '{deleteUser.Login}' ?")"></DeleteConfirmDialog>

<style>
    tr.disabled-user td:not(:last-child) {
        opacity: 0.4;
    }

    .current-user {
        background-color: lemonchiffon;
    }
</style>

@code {
    DeleteConfirmDialog deleteConfirmDialog;

    List<string> groups = null;
    List<AppUser> users = null;
    AppUser editUser = null;
    AppUser newUser = null;
    AppUser deleteUser = null;

    protected override async Task OnInitializedAsync()
    {
        users = (await userStorage.GetUsers()).Select(u => new AppUser()
        {
            Login = u.login,
            Id = u.user_id,
            LastLoginDateTime = u.last_login_date,
            CreatingDate = u.creation_date,
            GroupName = u.group_name,
            IsEnabled = u.status,
            AllowedIp = u.ip
        }).ToList();
        groups = await userStorage.GetUserGroups();
    }

    public async Task UpdateUser(AppUser user)
    {
        if (!PasswordCheck(user)) { return; }

        var updateData = new AppUserEntity()
        {
            user_id = user.Id,
            status = user.IsEnabled,
            group_name = user.GroupName,
            password = user.Password,
            ip = string.IsNullOrWhiteSpace(user.AllowedIp) ? null : user.AllowedIp
        };
        await userStorage.UpdateUser(updateData);
        await logger.Write(LogEntryGroupName.Accounts, "Аккаунт обновлен", user.Login);

        user.Password = null;
        editUser = null;
        toasts.ShowSuccess("Информация обновлена");
    }

    public async Task SaveNewUser()
    {
        if (!PasswordCheck(newUser)) { return; }

        var entity = new AppUserEntity()
        {
            login = newUser.Login,
            password = newUser.Password,
            group_name = newUser.GroupName,
            ip = newUser.AllowedIp
        };

        await userStorage.AddUser(entity);
        users.Add(newUser);
        await logger.Write(LogEntryGroupName.Accounts, "Аккаунт добавлен", newUser.Login);
        newUser = null;
    }

    private bool PasswordCheck(AppUser user)
    {
        if (user.Password != null && user.Password.Length < 6)
        {
            toasts.ShowError("Минимальная длинна пароля 6 символов");
            return false;
        }
        return true;
    }

    private void ShowDeleteUserDialog(AppUser user)
    {
        deleteUser = user;
        deleteConfirmDialog.Show();
    }

    private async Task DeleteConfirmed(bool dialogResult)
    {
        if (dialogResult)
        {
            await userStorage.DeleteUser(deleteUser.Id);
            toasts.ShowInfo($"Пользователь удален '{deleteUser.Login}'");
            await logger.Write(LogEntryGroupName.Accounts, "Аккаунт удален", deleteUser.Login);
            users.Remove(deleteUser);
            deleteUser = null;
        }
    }
}
