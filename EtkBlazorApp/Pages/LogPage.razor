@page "/log"
@attribute [Authorize(Roles = "Administrator")]
@inject IDatabase database
@inject MyDbLogger logger


<h3>Журнал событий приложения</h3>
@if (entries == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container-fluid">

        <div class="row my-5">
            <div class="col-md-3">
                <label for="filter-user">Пользователь</label>
                <select name="filter-user" class="form-control" @onchange="@(e => selectedUser = e.Value.ToString())">
                    <option value="">Все</option>
                    @foreach (var user in users)
                    {
                        <option value="@user" selected="@(selectedUser == user)">@user</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="filter-group-name">Категория</label>
                <select name="filter-group-name" class="form-control" @onchange="SelectedGroupFilterChanged">
                    <option value="">Все</option>
                    @foreach (var group in (LogEntryGroupName[])Enum.GetValues(typeof(LogEntryGroupName)))
                    {
                <option value="@group">@group.GetDescriptionAttribute()</option>
                    }
                </select>
            </div>

            <div class="col-md-3 offset-3">
                <button class="btn btn-success" @onclick="ApplyFilter">Обновить фильтр</button>
            </div>
        </div>

        <table class="table table-striped log-table">
            <thead class="thead-etk">
                <tr>
                    <th>Дата|Время</th>
                    <th>Пользователь</th>
                    <th>Группа</th>
                    <th>Заголовок</th>
                    <th>Описание</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="entries" ItemSize="14" TItem="LogEntryEntity">
                    <ItemContent>
                        <tr @key="context.GetHashCode()">
                            <td>@context.date_time.ToString("G")</td>
                            <td>@context.user</td>
                            <td>@context.group_name</td>
                            <td>@context.title</td>
                            <td>@context.message</td>
                        </tr>
                    </ItemContent>
                    <Placeholder>
                        <tr colspan="4">
                            <LoadingSpinner></LoadingSpinner>
                        </tr>
                    </Placeholder>
                </Virtualize>
            </tbody>
        </table>

    </div>
}

@code {

    List<LogEntryEntity> entries = null;
    List<string> users = new List<string>();

    string selectedUser;
    LogEntryGroupName? selectedGroup;

    protected override async Task OnInitializedAsync()
    {
        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        entries = null;

        await logger.Send();


        IEnumerable<LogEntryEntity> data = await database.GetLogItems(1000);
        users = data.Select(item => item.user).OrderBy(u => u).Distinct().ToList();

        if (!string.IsNullOrWhiteSpace(selectedUser))
        {
            data = data.Where(entry => entry.user.Equals(selectedUser, StringComparison.OrdinalIgnoreCase));
        }
        if (selectedGroup != null)
        {
            data = data.Where(entry => entry.group_name == selectedGroup.Value);
        }



        entries = data.ToList();

        StateHasChanged();
    }

    private void SelectedGroupFilterChanged(ChangeEventArgs e)
    {
        if(string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            selectedGroup = null;
        }
        else
        {
            selectedGroup = (LogEntryGroupName)Enum.Parse<LogEntryGroupName>(e.Value.ToString());
        }
    }
}
