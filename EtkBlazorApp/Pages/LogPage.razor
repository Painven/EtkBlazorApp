@page "/log"
@attribute [Authorize(Roles = "Administrator")]
@using System.Collections.ObjectModel;
@using System.ComponentModel;


<h3>Журнал событий приложения</h3>
@if (testItems == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container-fluid">

        <div class="row my-5">
            <div class="col-md-3">
                <label for="filter-user">Пользователь</label>
                <select name="filter-user" class="form-control" @onchange="@(e => selectedUser = e.Value.ToString())">
                    <option value="">Все</option>
                    @foreach (var user in users)
                    {
                        <option value="@user">@user</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="filter-group-name">Категория</label>
                <select name="filter-group-name" class="form-control" @onchange="SelectedGroupFilterChanged">
                    <option value="">Все</option>
                    @foreach (var group in (LogEntryGroupName[])Enum.GetValues(typeof(LogEntryGroupName)))
                    {
                <option value="@group">@group.GetDescriptionAttribute()</option>
                    }
                </select>
            </div>

            <div class="col-md-3 offset-3">
                <button class="btn btn-success" @onclick="ApplyFilter">Обновить фильтр</button>
            </div>
        </div>

        <table class="table table-striped log-table">
            <thead class="thead-etk">
                <tr>
                    <th>Дата|Время</th>
                    <th>Пользователь</th>
                    <th>Группа</th>
                    <th>Действией</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="testItems" ItemSize="14" TItem="LogEntryEntity">
                    <ItemContent>
                        <tr @key="context.GetHashCode()">
                            <td>@context.DateTime.ToString("G")</td>
                            <td>@context.User</td>
                            <td>@context.GroupName</td>
                            <td>@context.Message</td>
                        </tr>
                    </ItemContent>
                    <Placeholder>
                        <tr colspan="4">
                            <LoadingSpinner></LoadingSpinner>
                        </tr>
                    </Placeholder>
                </Virtualize>
            </tbody>
        </table>

    </div>
}

@code {

    List<LogEntryEntity> source = null;
    List<LogEntryEntity> testItems = null;

    List<string> users;

    string selectedUser;
    LogEntryGroupName? selectedGroup;

    protected override async Task OnInitializedAsync()
    {
        source = await LoadEntries();
        testItems = source;

        users = testItems.Select(item => item.User).OrderBy(u => u).Distinct().ToList();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        IEnumerable<LogEntryEntity> tempSource = source;

        if (!string.IsNullOrWhiteSpace(selectedUser))
        {
            tempSource = tempSource.Where(entry => entry.User.Equals(selectedUser, StringComparison.OrdinalIgnoreCase));
        }
        if (selectedGroup != null)
        {
            tempSource = tempSource.Where(entry => entry.GroupName == selectedGroup);
        }

        testItems = tempSource.ToList();
        StateHasChanged();
    }

    private void SelectedGroupFilterChanged(ChangeEventArgs e)
    {
        if(string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            selectedGroup = null;
        }
        else
        {
            selectedGroup = (LogEntryGroupName)Enum.Parse<LogEntryGroupName>(e.Value.ToString());
        }
    }

    public async Task<List<LogEntryEntity>> LoadEntries()
    {
        var data = Enumerable
            .Range(1, 5000)
            .Select(number => new LogEntryEntity()
            {
                Id = number,
                DateTime = DateTime.Now.AddMinutes(-(5000 / 2) + number),
                GroupName = (LogEntryGroupName)Enum.GetValues(typeof(LogEntryGroupName)).GetValue((int)new Random().Next(0, Enum.GetValues(typeof(LogEntryGroupName)).Length)),
                User = "User" + new Random().Next(1,5),
                Message = "Действией пользователя"
            })
            .ToList();

        return data;
    }
}
