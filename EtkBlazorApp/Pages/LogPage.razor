@page "/log"

@using System.Threading;
@attribute [Authorize(Roles = "Administrator")]
@inject ILogStorage database
@implements IDisposable

<h3>Журнал событий приложения</h3>
@if (entries == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container-fluid">
        <div class="row my-2">
            <button class="btn btn-success" style="margin-right: 18px;" @onclick="ApplyFilter">Обновить фильтр</button>

            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-primary @(filterMaxDays == 0 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 0)">
                    <input type="radio" name="options" id="option_all" autocomplete="off"> Все
                </label>
                <label class="btn btn-primary @(filterMaxDays == 31 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 31)">
                    <input type="radio" name="options" id="option_month" autocomplete="off"> За месяц
                </label>
                <label class="btn btn-primary @(filterMaxDays == 7 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 7)">
                    <input type="radio" name="options" id="option_week" autocomplete="off"> За неделю
                </label>

                @for (int d = 7; d >= 1; d--)
                {
                    int local = -d;
                    <label class="btn btn-primary btn-sm @(filterMaxDays == local ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = local)">
                        <input type="radio" name="options" id="option_day_of_week_ago_@local" autocomplete="off">
                        @DateTime.Now.AddDays(local).ToString("ddd")
                        <br />
                        @DateTime.Now.AddDays(local).ToString("dd")
                    </label>
                }

                <label class="btn btn-primary @(filterMaxDays == 1 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 1)">
                    <input type="radio" name="options" id="option_day" autocomplete="off"> За сегодня
                </label>
            </div>
        </div>

        <div class="row my-5">
            <div class="col-md-3">
                <label for="filter-user">Пользователь</label>
                <select name="filter-user" class="form-control" @onchange="@(e => selectedUser = e.Value.ToString())">
                    <option value="">Все</option>
                    @foreach (var user in users)
                    {
                        <option value="@user" selected="@(selectedUser == user)">@user</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="filter-group-name">Категория</label>
                <select name="filter-group-name" class="form-control" @onchange="SelectedGroupFilterChanged">
                    <option value="">Все</option>
                    @foreach (var group in (LogEntryGroupName[])Enum.GetValues(typeof(LogEntryGroupName)))
                    {
                        <option selected="@(selectedGroup == group)" value="@group">@group.GetDescriptionAttribute()</option>
                    }
                </select>
            </div>
        </div>

        <table class="table table-striped log-table">
            <thead class="thead-etk">
                <tr>
                    <th>Дата|Время</th>
                    <th>Пользователь</th>
                    <th>Группа</th>
                    <th>Заголовок</th>
                    <th>Описание</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="entries" ItemSize="14" TItem="LogEntryEntity">
                    <ItemContent>
                        <tr @key="context.GetHashCode()" class="@(newLogEntries.Contains(context) ? "new-log-item-blink" : "")">
                            <td>@context.date_time.ToString("G")</td>
                            <td>@context.user</td>
                            <td>@context.group_name</td>
                            <td>@context.title</td>
                            <td>@context.message</td>
                        </tr>
                    </ItemContent>
                    <Placeholder>
                        <tr colspan="4">
                            <LoadingSpinner></LoadingSpinner>
                        </tr>
                    </Placeholder>
                </Virtualize>
            </tbody>
        </table>
    </div>
}

@code {
    const int MAX_ITEMS = 100;
    //Интервал должен совпадать с анимацией в site.css что бы не прерывать предыдущую
    readonly TimeSpan RefreshTimerInterval = TimeSpan.FromSeconds(5);
    Timer newItemsTimer;

    int filterMaxDays = 0;
    string selectedUser = null;
    LogEntryGroupName? selectedGroup = null;
    List<LogEntryEntity> entries = null;
    List<string> users = new List<string>();
    List<LogEntryEntity> newLogEntries = new List<LogEntryEntity>();

    protected override async Task OnInitializedAsync()
    {
        newItemsTimer = new Timer(RefreshTimerTick, null, (int)RefreshTimerInterval.TotalMilliseconds, (int)RefreshTimerInterval.TotalMilliseconds);
        await ApplyFilter();
    }

    private async void RefreshTimerTick(object o)
    {
        var lastItems = await database.GetLogItems(MAX_ITEMS, filterMaxDays);
        var alreadyAddedIds = entries.Select(e => e.id).ToList();
        lastItems.RemoveAll(i => alreadyAddedIds.Contains(i.id));
        if (lastItems.Any())
        {
            newLogEntries.Clear();
            newLogEntries.AddRange(lastItems);
            entries.InsertRange(0, newLogEntries);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ApplyFilter()
    {
        entries = null;

        IEnumerable<LogEntryEntity> data = await database.GetLogItems(MAX_ITEMS, filterMaxDays);
        users = data.Select(item => item.user).OrderBy(u => u).Distinct().ToList();

        if (!string.IsNullOrWhiteSpace(selectedUser))
        {
            data = data.Where(entry => entry?.user != null && entry.user.Equals(selectedUser, StringComparison.OrdinalIgnoreCase));
        }

        if(selectedGroup != null)
        {
            data = data.Where(entry => entry.group_name == selectedGroup.GetDescriptionAttribute()).ToList();
        }

        entries = data.ToList();

        StateHasChanged();
    }

    private void SelectedGroupFilterChanged(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            selectedGroup = null;
        }
        else
        {
            selectedGroup = Enum.Parse<LogEntryGroupName>(e.Value.ToString());
        }
    }

    public void Dispose()
    {
        newItemsTimer?.Dispose();
    }
}
