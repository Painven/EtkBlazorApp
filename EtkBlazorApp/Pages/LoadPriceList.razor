@page "/load-price-list"
@attribute [Authorize]
@using EtkBlazorApp.Data
@using EtkBlazorApp.BL
@using System.IO;

<InputFile OnChange="HandleFileSelected" disabled="@(selectedTemplate == null)"></InputFile>

<hr />
@if (isFileLoading)
{
    <progress style="width: 100%; height: 24px;"></progress>
    <hr />
}

@if (loadedFiles != null && loadedFiles.Any())
{
    <h3>Загруженные прайс-листы</h3>
    <ul>
        @foreach (var data in loadedFiles)
        {
            <li style="margin: 4px 8px;color: red;"><strong style="color:black">@data.TemplateName</strong> @data.FileName<span style="color: navy"> (@data.RecordsInFile записей считано)</span></li>
        }
    </ul>
    <hr />
}

<h2>Выберите шаблон загружаемого файла</h2>
<div class="row">
    @foreach (var template in templates)
    {
        <div class="col-md-3 col-xs-12 col-sm-6 brand-template-box ">
            <img class="brand-template-logo" src="@($"./image/logotips/{template.GetType().Name}-logo.png")" />
            <div>
                <input type="radio"
                       id="@template.GetType().Name"
                       value="@template"
                       @onchange="@(e => selectedTemplate = template)"
                       checked="@(selectedTemplate == template)" />
                <label for="@template.GetType().Name" style="font-size: 11px; margin-left: 2px;">@template.GetType().Name</label>
            </div>
        </div>
    }
</div>

<hr />


@code
{
    List<IPriceListTemplate> templates = null;
    IPriceListTemplate selectedTemplate = null;
    IFileListEntry selectedFile = null;
    List<LoadedFileData> loadedFiles = null;
    bool isFileLoading = false;

    protected override void OnInitialized()
    {
        loadedFiles = new List<LoadedFileData>();
        templates = new List<IPriceListTemplate>(new[] { new SymmetronPriceListTemplate() });
        selectedTemplate = templates.First();
    }

    private async Task HandleFileSelected(IFileListEntry[] newFiles)
    {
        selectedFile = newFiles.FirstOrDefault();
        await LoadSelectedFile();
    }

    private void SelectedTemplateChanged(ChangeEventArgs e)
    {
        selectedTemplate = (IPriceListTemplate)e.Value;
    }

    private async Task LoadSelectedFile()
    {
        isFileLoading = true;

        if (selectedFile != null)
        {
            string tempFilePath = Path.GetTempFileName();

            //Загрузили файл
            //using (var fileStream = File.Create(tempFilePath))
            //{
            //    var bytes = new byte[selectedFile.Data.Length];
            //    await selectedFile.Data.ReadAsync(bytes, 0, bytes.Length);
            //    await fileStream.WriteAsync(bytes, 0, bytes.Length);
            //}

            selectedTemplate.FileName = $@"C:\users\user\downloads\{selectedFile.Name}";
            var records = await Task.Run(() => selectedTemplate.ReadPriceLines());

            var fileData = new LoadedFileData()
            {
                FileName = selectedFile.Name,
                RecordsInFile = records.Count,
                TemplateName = selectedTemplate.GetType().Name,
                TempFilePath = tempFilePath
            };

            loadedFiles.Add(fileData);

            File.Delete(tempFilePath);
        }

        isFileLoading = false;
        selectedFile = null;
        selectedTemplate = null;
    }
}
