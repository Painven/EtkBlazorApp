@page "/load-price-list"
@attribute [Authorize]
@using EtkBlazorApp.Data
@using EtkBlazorApp.BL
@using System.IO;
@using System.Threading;

<InputFile OnChange="@UploadFileSelected" disabled="@(selectedTemplate == null)"></InputFile>

<hr />
@if (isFileLoading)
{
    <progress style="width: 100%; height: 24px;"></progress>
    <hr />
}

@if (loadedFiles != null && loadedFiles.Any())
{
    <h3>Загруженные прайс-листы</h3>
    <ul>
        @foreach (var data in loadedFiles)
        {
            <li style="margin: 4px 8px;color: red;"><strong style="color:black">@data.TemplateName</strong> @data.FileName<span style="color: navy"> (@data.RecordsInFile записей считано)</span></li>
        }
    </ul>
    <hr />
}

<h2>Выберите шаблон загружаемого файла</h2>
<div class="row">
    @foreach (var template in templates)
    {
        <div class="col-md-3 col-xs-12 col-sm-6 brand-template-box ">
            <img class="brand-template-logo" src="@($"./image/logotips/{template.GetType().Name}-logo.png")" />
            <div>
                <input type="radio"
                       id="@template.GetType().Name"
                       value="@template"
                       @onchange="@(e => selectedTemplate = template)"
                       checked="@(selectedTemplate == template)" />
                <label for="@template.GetType().Name" style="font-size: 11px; margin-left: 2px;">@template.GetType().Name</label>
            </div>
        </div>
    }
</div>

<hr />


@code
{
    List<IPriceListTemplate> templates = null;
    List<LoadedFileData> loadedFiles = null;
    IPriceListTemplate selectedTemplate = null;

    bool isFileLoading = false;
    const int MAX_UPLOAD_SIZE = 15_000_000; // 15 мб
    CancellationTokenSource tcs;

    protected override void OnInitialized()
    {
        tcs = new CancellationTokenSource();
        loadedFiles = new List<LoadedFileData>();
        templates = new List<IPriceListTemplate>(new[] { new SymmetronPriceListTemplate() });
        selectedTemplate = templates.First();
    }

    private async Task UploadFileSelected(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;

        isFileLoading = true;

        string tempFilePath = Path.GetTempFileName();

        //Загрузили файл
        using (var fileStream = File.Create(tempFilePath))
        {
            var buffer = new byte[selectedFile.Size];

            await selectedFile.OpenReadStream(MAX_UPLOAD_SIZE, tcs.Token).ReadAsync(buffer, tcs.Token);
            await fileStream.WriteAsync(buffer, 0, buffer.Length);
        }

        selectedTemplate.FileName = tempFilePath;
        var records = await Task.Run(() => selectedTemplate.ReadPriceLines());

        var fileData = new LoadedFileData()
        {
            RecordsInFile = records.Count,
            TemplateName = selectedTemplate.GetType().Name,
            TempFilePath = tempFilePath
        };

        loadedFiles.Add(fileData);

        File.Delete(tempFilePath);

        isFileLoading = false;
        selectedTemplate = null;
        selectedFile = null;
    }

    private void SelectedTemplateChanged(ChangeEventArgs e)
    {
        selectedTemplate = (IPriceListTemplate)e.Value;
    }

}
