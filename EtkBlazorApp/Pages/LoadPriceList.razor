@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@using System.IO;
@using System.Threading;

<InputFile OnChange="@UploadFileSelected"
           disabled="@(selectedTemplate == null)"></InputFile>

@if (isFileLoading)
{
    <IntermediateProgressBar />
    <hr />
    <button @onclick="CancelFileUpload" class="btn btn-outline-dark">Отменить загрузку</button>
}

<LoadedPriceListDisplay />

<h2>Выберите шаблон загружаемого файла</h2>

<div class="row">
    @foreach (var template in templates)
    {
        <PriceListTemplateItem Template="@template" CheckedChanged="@(e => selectedTemplate = template)"></PriceListTemplateItem>
    }
</div>

<hr />

@if (priceListManager.LoadedFiles != null && priceListManager.LoadedFiles.Any())
{
    <a href="/update-products" class="btn btn-lg btn-outline-primary">Перейти к обновлению товаров</a>
}

@code
{
    [Inject] PriceListManager priceListManager { get; set; }
    List<IPriceListTemplate> templates = null;
    IPriceListTemplate selectedTemplate = null;

    bool isFileLoading = false;
    const int MAX_UPLOAD_SIZE = 15_000_000; // 15 мб
    CancellationTokenSource tcs;

    protected override void OnInitialized()
    {
        tcs = new CancellationTokenSource();
        templates = new List<IPriceListTemplate>(Enumerable.Repeat(new SymmetronPriceListTemplate(), 20));
        selectedTemplate = templates.First();
    }

    private void CancelFileUpload()
    {
        tcs.Cancel();
    }

    private async Task UploadFileSelected(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;
        CancellationToken cancelToken = tcs.Token;
        isFileLoading = true;
        string tempFilePath = Path.GetTempFileName();

        //Загрузили файл
        try
        {

            using (var fileStream = File.Create(tempFilePath))
            {
                var buffer = new byte[selectedFile.Size];
                await selectedFile.OpenReadStream(MAX_UPLOAD_SIZE, cancelToken).ReadAsync(buffer, cancelToken);
                await fileStream.WriteAsync(buffer, 0, buffer.Length);
            }

            selectedTemplate.FileName = tempFilePath;
            int records = await priceListManager.LoadPriceList(selectedTemplate, cancelToken);
        }
        catch (Exception ex)
        {

        }
        finally
        {
            File.Delete(tempFilePath);
            isFileLoading = false;
            selectedTemplate = null;
            selectedFile = null;
            StateHasChanged();
        }
    }

    private void SelectedTemplateChanged(ChangeEventArgs e)
    {
        selectedTemplate = (IPriceListTemplate)e.Value;
    }
}
