@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@using System.IO;
@using System.Threading;

<InputFile OnChange="@UploadFileSelected" 

           disabled="@(selectedTemplate == null)"></InputFile>

<hr />

@if (isFileLoading)
{
    <progress style="width: 100%; height: 24px;"></progress>
    <hr />
    <button @onclick="CancelFileUpload" class="btn btn-outline-dark">Отменить загрузку</button>
}

@if (priceListManager.LoadedFiles != null && priceListManager.LoadedFiles.Any())
{
    <h3>Загруженные прайс-листы <a href="/price-list-loaded-data" target="_blank"><i class="oi oi-eye"/></a></h3>
    <ul style="list-style-type: none;">
        @foreach (var data in priceListManager.LoadedFiles)
        {
            <li style="margin: 4px 8px;color: red;">
                <button class="btn btn-sm btn-danger" @onclick="@(e => priceListManager.RemovePriceList(data))">
                    &times;
                </button>
                <strong style="color:black">@data.TemplateName</strong> @data.FileName<span style="color: navy"> (@data.RecordsInFile записей считано)</span>
            </li>
        }
    </ul>
    <hr />
}

<h2>Выберите шаблон загружаемого файла</h2>

<div class="row">
    @foreach (var template in templates)
    {
        <div class="col-md-2 col-xs-6 col-sm-4 price-list-template-outer">
            <div class="price-list-template-inner @(IsTemplateAlreadyLoaded(template) ? "already-loaded-template" : "")">
                <img class="brand-template-logo" src="@($"./image/logotips/{template.GetType().Name}-logo.png")" />
                <div>
                    <input type="radio"
                           id="@template.GetType().Name"
                           value="@template"
                           @onchange="@(e => selectedTemplate = template)"
                           checked="@(selectedTemplate == template)" />
                    <label for="@template.GetType().Name" style="font-size: 11px; margin-left: 2px;">@template.GetType().Name</label>
                </div>
            </div>
        </div>
    }
</div>

<hr />

@code
{
    [Inject] PriceListManager priceListManager { get; set; }
    List<IPriceListTemplate> templates = null;
    IPriceListTemplate selectedTemplate = null;

    bool isFileLoading = false;
    const int MAX_UPLOAD_SIZE = 15_000_000; // 15 мб
    CancellationTokenSource tcs;


    protected override void OnInitialized()
    {
        tcs = new CancellationTokenSource();
        templates = new List<IPriceListTemplate>(Enumerable.Repeat(new SymmetronPriceListTemplate(), 20));
        selectedTemplate = templates.First();
    }

    private void CancelFileUpload()
    {
        tcs.Cancel();
    }

    private async Task UploadFileSelected(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;
        CancellationToken cancelToken = tcs.Token;
        isFileLoading = true;
        string tempFilePath = Path.GetTempFileName();

        //Загрузили файл
        try
        {

            using (var fileStream = File.Create(tempFilePath))
            {
                var buffer = new byte[selectedFile.Size];
                await selectedFile.OpenReadStream(MAX_UPLOAD_SIZE, cancelToken).ReadAsync(buffer, cancelToken);
                await fileStream.WriteAsync(buffer, 0, buffer.Length);
            }

            selectedTemplate.FileName = tempFilePath;
            int records = await priceListManager.LoadPriceList(selectedTemplate, cancelToken);
        }
        catch (Exception ex)
        {

        }
        finally
        {
            File.Delete(tempFilePath);
            isFileLoading = false;
            selectedTemplate = null;
            selectedFile = null;
        }
    }

    private void SelectedTemplateChanged(ChangeEventArgs e)
    {
        selectedTemplate = (IPriceListTemplate)e.Value;
    }

    private bool IsTemplateAlreadyLoaded(IPriceListTemplate template)
    {
        return priceListManager.LoadedTemplates.Contains(template);
    }
}
