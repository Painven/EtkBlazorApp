@page "/loaded-price-list-details/{TemplateGuid}"
@inject PriceListManager manager
@inject IManufacturerStorage manufacturerStorage
@inject ITemplateStorage templateStorage
@inject IProductStorage productStorage
@inject IJSRuntime js

@if (templateInformation != null)
{
    <img src="@templateInformation.image" 
         style="width: 300px; margin-bottom: 20px; border: 1px solid lightgray;"
         class="rounded mx-auto d-block">
}
@if (!string.IsNullOrWhiteSpace(singleManufacturer))
{
    <h2>Производитель "@singleManufacturer"</h2>
}
else
{
    <div class="price-list-template-manufacturers">
        <button type="button" class="btn btn-@(filteredManufacturer == null ? "warning" : "primary") mx-1 my-2" @onclick="@(e => ApplyManufacturerFilter(null))">
            Все <span class="badge badge-pill badge-info">@source.Count</span>
        </button>

        @foreach (var kvp in productsByBrand)
        {
            <button type="button" class="btn btn-@(filteredManufacturer == kvp.Key ? "warning" : "primary") mx-1 my-2" @onclick="@(e => ApplyManufacturerFilter(kvp.Key))">
                @kvp.Key <span class="badge badge-pill badge-info">@kvp.Value</span>
            </button>
        }
    </div>
}

<div style="overflow-y: visible; height: 900px;">
    <table class="table table-striped table-bordered uploaded-price-list-lines-table">
        <thead class="thead-etk">
            <tr>
                @if (hasManufacturerColumn)
                {
                    <th>Производитель</th>
                }
                @if (hasNameColumn)
                {
                    <th>Товар</th>
                }
                <th>Артикул</th>
                @if (hasModelColumn)
                {
                    <th>Модель</th>
                }
                @if (hasQuantityColumn)
                {
                    <th>Количество</th>
                }
                @if (hasPriceColumn)
                {
                    <th>Цена</th>
                    <th>Валюта</th>
                }
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="line" Items="@priceLines" ItemSize="20" TItem="PriceLine" OverscanCount="25" @key="TemplateGuid">
                <tr @key="RowGuids[line].ToString()">
                    @if (hasManufacturerColumn)
                    {
                        <td>@line.Manufacturer</td>
                    }
                    @if (hasNameColumn)
                    {
                        <td>@line.Name</td>
                    }
                    <td>
                        <button class="btn btn-sm btn-outline-primary mx-1" @onclick="@( e => SearchSkuOnWebsite("findBySku", line.Sku))">
                            <span class="oi oi-magnifying-glass"></span>
                        </button>
                        @line.Sku
                    </td>
                    @if (hasModelColumn)
                    {
                        <td>
                            <button class="btn btn-sm btn-outline-primary mx-1" @onclick="@( e => SearchSkuOnWebsite("findByModel", line.Model))">
                                <span class="oi oi-magnifying-glass"></span>
                            </button>
                            @line.Model
                        </td>
                    }
                    @if (hasQuantityColumn)
                    {
                        <td>@line.Quantity</td>
                    }
                    @if (hasPriceColumn)
                    {
                        <td>@line.Price</td>
                        <td>@line.Currency</td>
                    }
                </tr>
            </Virtualize>
        </tbody>
    </table>
</div>

@code {
    [Parameter] public string TemplateGuid { get; set; }

    PriceLine selectedPriceLine = null;
    List<PriceLine> source = new List<PriceLine>();
    List<PriceLine> priceLines = new List<PriceLine>();

    Dictionary<PriceLine, Guid> RowGuids = new Dictionary<PriceLine, Guid>();
    Dictionary<string, int> productsByBrand;

    PriceListTemplateEntity templateInformation = null;

    string filteredManufacturer;
    string singleManufacturer;

    bool hasManufacturerColumn;
    bool hasModelColumn;
    bool hasNameColumn;
    bool hasPriceColumn;
    bool hasQuantityColumn;

    protected override async Task OnInitializedAsync()
    {
        templateInformation = await templateStorage.GetPriceListTemplateById(TemplateGuid);

        var data = manager.LoadedFiles.FirstOrDefault(p => p.TemplateDescription.id == TemplateGuid)?.ReadedPriceLines;

        RowGuids = data.ToDictionary(i => i, i => Guid.NewGuid());

        priceLines.AddRange(data);
        source.AddRange(data);

        var groupByBrand = priceLines.GroupBy(l => l.Manufacturer);

        hasManufacturerColumn = groupByBrand.Count() > 1;
        hasModelColumn = priceLines.Any(pl => pl.Model != pl.Sku);
        hasNameColumn = priceLines.Any(pl => !string.IsNullOrWhiteSpace(pl.Name));
        hasQuantityColumn = priceLines.Any(pl => pl.Quantity.HasValue);
        hasPriceColumn = priceLines.Any(pl => pl.Price.HasValue);

        if (!hasManufacturerColumn)
        {
            singleManufacturer = groupByBrand.SingleOrDefault().Key;
        }
        else
        {
            var allowedManufacturers = (await manufacturerStorage.GetManufacturers()).Select(m => m.name).ToList();
            productsByBrand = groupByBrand
                .Where(m => allowedManufacturers.Contains(m.Key, StringComparer.OrdinalIgnoreCase))
                .OrderByDescending(i => i.Count())
                .ToDictionary(i => i.Key, j => j.Count());
        }
    }

    private async Task SearchSkuOnWebsite(string tag, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) { return; }

        ProductEntity bySku = await productStorage.GetProductBySku(searchString);
        ProductEntity byModel = await productStorage.GetProductByModel(searchString);
        ProductEntity findedProduct = (tag == "findBySku") ? (bySku ?? byModel) : (byModel ?? bySku);

        string searchUri = "https://etk-komplekt.ru/index.php?route=product/search&search=" + HttpUtility.HtmlEncode(searchString);
        if (findedProduct != null)
        {
            searchUri = $"https://etk-komplekt.ru/index.php?route=product/product&product_id={findedProduct.product_id}";
        }

        await js.InvokeVoidAsync("open", searchUri, "_blank");
    }

    private void RemoveSelectedPriceLine()
    {
        source.Remove(selectedPriceLine);
        priceLines.Remove(selectedPriceLine);
        manager.PriceLines.Remove(selectedPriceLine);
    }

    private void ApplyManufacturerFilter(string manufacturer)
    {
        if (manufacturer == null)
        {
            filteredManufacturer = null;
            priceLines = source;
        }
        else
        {
            filteredManufacturer = manufacturer;
            priceLines = source.Where(pl => pl.Manufacturer.Equals(manufacturer)).ToList();
        }
    }
}
