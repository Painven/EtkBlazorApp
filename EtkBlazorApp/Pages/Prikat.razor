@page "/prikat"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject ITemplateStorage templateStorage
@inject ISettingStorage settingStorage
@inject IManufacturerStorage manufacturerStorage
@inject IJSRuntime js
@inject UserLogger logger
@inject ReportManager ReportManager
@using System.IO;


@if (itemsSource == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <img style="height: 100px; margin: 0px auto 40px auto; display: block;" src="image/logotips/vse-instrumenti-logo-big.jpg" class="img-fluid" />
    <div class="container">
        @if (inProgress)
        {
            <IntermediateProgressBar></IntermediateProgressBar>
        }
        else
        {
            <div class="row my-3">
                <div class="col-md-3">
                    <button class="btn btn-info w-100" @onclick="(() => showSettingsBox = !showSettingsBox)">
                        <span class="oi oi-cog px-1"></span>
                        @(!showSettingsBox ? "Показать меню настроек" : "Скрыть меню настроек")
                    </button>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-info w-100 mx-2" @onclick="@(e => ShowPriceExample = !ShowPriceExample)">
                        <span class="oi oi-info px-1"></span>
                        @(!ShowPriceExample ? "Показать тестовые цены" : "Скрыть тестовые цены")
                    </button>
                    @if (ShowPriceExample)
                    {
                        <input type="number" class="form-control mx-2 my-1 justify-content-center" name="example-price" @bind-value="ExamplePrice" />
                    }
                </div>
                <div class="col-md-6">
                    <button type="button" class="btn btn-primary w-100" @onclick="GetReport" disabled="@reportButtonDisabled">
                        <span class="oi oi-spreadsheet px-1"></span>
                        Скачать выгрузку
                    </button>
                </div>
            </div>



            <ul class="list-group" hidden="@(!showSettingsBox)">
                <li class="list-group-item">
                    <input class="form-check-input" type="checkbox"
                           checked="@reportSettingsHasStock"
                           @onchange="HasStockStateChanged" />
                    Остаток > 0
                </li>
                <li class="list-group-item">
                    <input class="form-check-input" type="checkbox"
                           checked="@reportSettingsHasEan"
                           @onchange="HasEanStateChanged" />
                    Обязательно есть EAN
                </li>
            </ul>
        }

        <div class="table-responsive">
            <table class="table prikat-table">
                <thead class="thead-etk">
                    <tr>
                        <th width="5%">
                            <input type="checkbox"
                                   style="display: inline-block;  margin: 2px 6px; vertical-align: middle;"
                                   checked="@uncheckAllState"
                                   @onchange="HeaderCheckAll" />
                        </th>
                        <th>Производитель</th>
                        <th>Закупочная цена<br /><small>(наценка к цене от сайта)</small></th>
                        <th>Рекомендуемая цена<br /><small>(наценка к закупочной цене)</small></th>
                        <th>Валюта выгрузки</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in orderedSource)
                    {
                        <CascadingValue Value="@ShowPriceExample">
                            <CascadingValue Value="@ExamplePrice">
                                <PrikatTemplateItem Item="@item" ItemChanged="@(e => DiscountChanged(item))" />
                            </CascadingValue>
                        </CascadingValue>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    List<PrikatManufacturerDiscountViewModel> itemsSource;
    List<PrikatManufacturerDiscountViewModel> orderedSource => itemsSource.OrderByDescending(t => t.IsChecked).ToList();

    public bool ShowPriceExample { get; set; } = false;
    public decimal ExamplePrice { get; set; } = 1000;

    bool uncheckAllState = false;
    bool reportSettingsHasStock = false;
    bool reportSettingsHasEan = false;
    bool showSettingsBox = false;
    bool inProgress = false;

    bool reportButtonDisabled => itemsSource == null || itemsSource.All(m => m.IsChecked == false);

    protected override async Task OnInitializedAsync()
    {
        reportSettingsHasStock = await settingStorage.GetValue<bool>("prikat-export-has-stock");
        reportSettingsHasEan = await settingStorage.GetValue<bool>("prikat-export-has-ean");

        itemsSource = (await templateStorage.GetPrikatTemplates())
                .Select(t => new PrikatManufacturerDiscountViewModel()
                {
                    IsChecked = t.enabled || (t.discount1 != decimal.Zero || t.discount2 != decimal.Zero),
                    Discount1 = t.discount1,
                    Discount2 = t.discount2,
                    Manufacturer_id = t.manufacturer_id,
                    Manufacturer = t.manufacturer_name,
                    CurrencyCode = t.currency_code
                })
                .ToList();
    }

    private async Task GetReport()
    {
        inProgress = true;
        StateHasChanged();
        string filePath = null;

        try
        {
            var selectedIds = itemsSource.Where(item => item.IsChecked).Select(item => item.Manufacturer_id);
            filePath = await ReportManager.Prikat.Create(selectedIds, reportSettingsHasStock, reportSettingsHasEan);
            await js.InvokeAsync<object>("saveAsFile", Path.GetFileName(filePath), Convert.ToBase64String(File.ReadAllBytes(filePath)));
            await logger.Write(LogEntryGroupName.Prikat, "Создан", "Выгрузка для ВсеИнструменты создана");
        }
        catch (Exception ex)
        {
            await logger.Write(LogEntryGroupName.Prikat, "Ошибка", $"Ошибка создания выгрузки для ВсеИнструменты: {ex.Message}");
        }
        finally
        {
            File.Delete(filePath);
            inProgress = false;
        }
    }

    private async Task HasStockStateChanged(ChangeEventArgs e)
    {
        reportSettingsHasStock = (bool)e.Value;
        await settingStorage.SetValue<bool>("prikat-export-has-stock", reportSettingsHasStock);
    }

    private async Task HasEanStateChanged(ChangeEventArgs e)
    {
        reportSettingsHasEan = (bool)e.Value;
        await settingStorage.SetValue<bool>("prikat-export-has-ean", reportSettingsHasEan);
    }

    private void HeaderCheckAll(ChangeEventArgs e)
    {
        uncheckAllState = !uncheckAllState;

        foreach (var item in itemsSource)
        {
            item.IsChecked = uncheckAllState && new[] { item.Discount1, item.Discount2 }.Any(d => d != decimal.Zero);
        }

        StateHasChanged();
    }

    private async Task DiscountChanged(PrikatManufacturerDiscountViewModel vmItem)
    {
        var dbItem = new PrikatReportTemplateEntity()
        {
            manufacturer_id = vmItem.Manufacturer_id,
            discount1 = vmItem.Discount1,
            discount2 = vmItem.Discount2,
            enabled = vmItem.IsChecked,
            currency_code = vmItem.CurrencyCode
        };
        await templateStorage.SavePrikatTemplate(dbItem);

        StateHasChanged();
    }
}

