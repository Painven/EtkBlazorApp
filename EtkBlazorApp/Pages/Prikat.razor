@page "/prikat"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject IToastService toastService
@inject ISettingStorage settings
@inject IManufacturerStorage manufacturerStorage
@inject IJSRuntime js


@if (manufacturerDiscounts == null)
{
    <LoadingSpinner />
}
else
{
    <h3>ВсеИнcтрументы</h3>
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <div class="row">
                <div class="col-md-6 col-sm-6">
                    <button type="button" class="btn btn-vi" style="width: 100%;" @onclick="GetReport" disabled="@reportButtonDisabled">Скачать выгрузку</button>
                </div>
                <div class="col-md-6 col-sm-6">
                    <input type="checkbox" class="form-control" value="@removeEmptyStock"/>
                    <p style="text-align: center; margin-top: 4px;">Не включать товары с 0 на складе</p>
                </div>
            </div>
            <div class="row">
                <div class="prikat-manufacturer-discount-list col-sm-12">
                    <div class="row">
                        <div class="col-md-6">Производитель</div>
                        <div class="col-md-3">Наценка</div>
                        <div class="col-md-3">Закупочная цена</div>
                    </div>
                    @foreach (var item in manufacturerDiscounts)
                    {
                        @if (!hasSeparator && !item.IsChecked)
                        {
                            <hr class="discount-list-separator" />
                            hasSeparator = true;
                        }
                        <PrikatManufacturerDiscountItem Item="@item" ItemChanged="DiscountChanged" />
                    }
                </div>
            </div>
        </div>
    </div>
}
@code {

    private List<PrikatManufacturerDiscountViewModel> manufacturerDiscounts = null;

    [Inject]ReportManager ReportManager { get; set; }

    bool removeEmptyStock = true;
    bool hasSeparator = false;
    bool needReloadSavedData = false;
    bool reportButtonDisabled => manufacturerDiscounts.All(m => m.IsChecked == false);


    private async Task GetReport()
    {
        var filePath = ReportManager.Prikat.Create(removeEmptyStock);

        await js.InvokeVoidAsync("FileSaveAs", "prikat_report.csv", System.IO.File.ReadAllText(filePath));

        System.IO.File.Delete(filePath);
    }

    private async Task DiscountChanged()
    {
        var checkedData = string.Join(";", manufacturerDiscounts.Where(m => m.IsChecked).Select(m => m.Id).OrderBy(id => id));
        await settings.SetValue("prikat_checked_manufacturers", checkedData);

        var discountData = string.Join(";", manufacturerDiscounts.Select(m => $"{m.Id}={m.Discount1}|{m.Discount2}"));
        await settings.SetValue("prikat_manufacturer_discounts", discountData);

        needReloadSavedData = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        hasSeparator = false;

        if (firstRender || needReloadSavedData)
        {
            needReloadSavedData = false;

            var manufacturers = await manufacturerStorage.GetManufacturers();
            var discountData = (await settings.GetValue("prikat_manufacturer_discounts")).Split(';')
            .Select(data => data.Split('='))
            .Select(array => new
            {
                manufacturer_id = int.Parse(array[0]),
                discount1 = int.Parse(array[1].Split('|')[0]),
                discount2 = int.Parse(array[1].Split('|')[1])
            })
            .ToDictionary(i => i.manufacturer_id, i => Tuple.Create(i.discount1, i.discount2));

            var checkedManufacturers = (await settings.GetValue("prikat_checked_manufacturers")).Split(';').Select(i => int.Parse(i)).ToList();
            manufacturerDiscounts = manufacturers
                .Select(manufacturer => new PrikatManufacturerDiscountViewModel(manufacturer.name)
                {
                    Id = manufacturer.manufacturer_id,
                    Discount1 = discountData.ContainsKey(manufacturer.manufacturer_id) ? discountData[manufacturer.manufacturer_id].Item1 : 0,
                    Discount2 = discountData.ContainsKey(manufacturer.manufacturer_id) ? discountData[manufacturer.manufacturer_id].Item2 : 0,
                    IsChecked = checkedManufacturers.Contains(manufacturer.manufacturer_id)
                })
                .OrderByDescending(item => item.IsChecked)
                .ToList();

            StateHasChanged();
        }
    }
}

