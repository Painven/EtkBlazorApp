@page "/shipment-period";

@using EtkBlazorApp.DataAccess
@using EtkBlazorApp.Components;
@inject IManufacturerStorage _database
@inject UserLogger logger
@attribute [Authorize]

@if (manufacturers == null || stockList == null)
{
    <LoadingSpinner />
}
else
{
    <div class="row py-2">
        <div class="col-md-6 col-sm-12">
            <h1>Производители</h1>
            <table class="table table-hover manufacturers-shipment-period-table w-100">
                <thead class="thead-etk" style="height: 40px;">
                    <tr>
                        <th width="50%">Производитель</th>
                        <th width="20%">Срок поставки (дней)</th>
                        <th width="20%">Следующая дата поставка</th>
                        <th width="10%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in manufacturers)
                    {
                        <tr>
                            <td><a href="@item.Uri" target="_blank">@item.name</a></td>

                            @if (editManufacturer != item)
                            {
                                <td>@item.ShipmentPeriodInDays</td>
                                <td>@item.NextShipmentDate.ToShortDateString()</td>
                                <td>
                                    <button class="btn-secondary btn-sm" @onclick="@(e => editManufacturer = item)">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td><input @bind="item.ShipmentPeriodInDays" /></td>
                                <td>@item.NextShipmentDate.ToShortDateString()</td>
                                <td>
                                    <button class="btn-info btn-sm" @onclick="@(e => ConfirmManufacturerChanges(item))">Подтвердить</button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-6 col-sm-12">
            <h1>Склады</h1>
            <table class="table table-hover manufacturers-shipment-period-table w-100">
                <thead class="thead-etk" style="height: 40px;">
                    <tr>
                        <th width="20%">Склад</th>
                        <th width="20%">Срок поставки (дней)</th>
                        <th width="20%">Следующая дата поставка</th>
                        <th width="5%"></th>
                        <th width="35%">Описание</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in stockList)
                    {
                    <tr>
                        <td>@item.Name</td>


                        @if (editStock != item)
                        {
                            <td>@item.ShipmentPeriodInDays</td>
                            <td>@item.NextShipmentDate.ToShortDateString()</td>
                            <td>
                                <button class="btn-secondary btn-sm" @onclick="@(e => editStock = item)">
                                    <span class="oi oi-pencil"></span>
                                </button>
                            </td>
                        }
                        else
                        {
                            <td><input @bind="item.ShipmentPeriodInDays" /></td>
                            <td>@item.NextShipmentDate.ToShortDateString()</td>
                            <td>
                                <button class="btn-info btn-sm" @onclick="@(e => ConfirmStockPartnerChanges(item))">Подтвердить</button>
                            </td>
                        }
                        <td style="white-space: nowrap;">@item.Description</td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@code {

    List<ManufacturerViewModel> manufacturers = null;
    ManufacturerViewModel editManufacturer = null;

    List<StockPartnerViewModel> stockList = null;
    StockPartnerViewModel editStock = null;


    private async Task ConfirmManufacturerChanges(ManufacturerViewModel manufacturer)
    {
        var data = new ManufacturerEntity()
        {
            manufacturer_id = manufacturer.Id,
            shipment_period = manufacturer.ShipmentPeriodInDays
        };

        if (manufacturer.OldShipmentPeriod != manufacturer.ShipmentPeriodInDays)
        {
            await _database.SaveManufacturer(data);
            await logger.Write(LogEntryGroupName.ManufacturerUpdate, "Обновление", $"Срок поставки «{manufacturer.name}» измнен с {manufacturer.OldShipmentPeriod} на {manufacturer.ShipmentPeriodInDays} дн.");
        }
        editManufacturer = null;
        manufacturer.OldShipmentPeriod = manufacturer.ShipmentPeriodInDays;
    }

    private async Task ConfirmStockPartnerChanges(StockPartnerViewModel stock)
    {
        var data = new StockPartnerEntity()
        {
            stock_partner_id = stock.Id,
            shipment_period = stock.ShipmentPeriodInDays
        };

        if (stock.OldShipmentPeriod != stock.ShipmentPeriodInDays)
        {
            await _database.SaveStockPartner(data);
            await logger.Write(LogEntryGroupName.ManufacturerUpdate, "Обновление", $"Срок поставки «{stock.Name}» измнен с {stock.OldShipmentPeriod} на {stock.ShipmentPeriodInDays} дн.");
        }
        editStock = null;
        stock.OldShipmentPeriod = stock.ShipmentPeriodInDays;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            manufacturers = (await _database.GetManufacturers())
                .Select(model => new ManufacturerViewModel(model.manufacturer_id, model.shipment_period)
                {
                    name = model.name,
                    keyword = model.keyword,
                    productsCount = model.productsCount
                })
                .ToList();

            stockList = (await _database.GetStockPartners())
                .OrderBy(stock => stock.shipment_period)
                .Select(model => new StockPartnerViewModel(model.stock_partner_id, model.shipment_period)
                {
                    Name = model.name,
                    Description = model.description
                })
                .ToList();
            StateHasChanged();
        }
    }

}
