@page "/shipment-period";

@using EtkBlazorApp.DataAccess
@using EtkBlazorApp.Components;
@inject IManufacturerStorage manufacturerStorage
@inject IToastService toasts
@inject IJSRuntime js 
@inject UserLogger logger
@attribute [Authorize]

@if (manufacturers == null || stockList == null)
{
    <LoadingSpinner />
}
else
{
<div class="row py-2">
    <div class="col-md-12 col-sm-12">
        <h1>Склады</h1>
        <table class="table table-hover manufacturers-shipment-period-table w-100">
            <thead class="thead-etk" style="height: 40px;">
                <tr>
                    <th width="15%">Склад</th>
                    <th width="5%">Изменить</th>
                    <th width="20%">Город</th>
                    <th width="10%">Дней</th>
                    <th width="10%">След. поставка</th>
                    <th class="button-cell-header">Бренды</th>
                    <th class="button-cell-header">Адрес</th>
                    <th class="button-cell-header">Телефон</th>
                    <th class="button-cell-header">Email</th>
                    <th width="40%">Описание</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in stockList)
                {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn-secondary btn-sm" @onclick="@(e => newStockDialog.Show(item))">
                            <span class="oi oi-pencil"></span>
                        </button>
                    </td>
                    <td>@item.City</td>
                    <td>@item.ShipmentPeriodInDays</td>
                    <td>@item.NextShipmentDate.ToShortDateString()</td>
                    <td>
                        <button class="btn-secondary btn-sm"                                
                                @onclick="@(e => ShowStockLinkedManufacturers(item))">
                            <span class="oi oi-layers"></span>
                        </button>
                    </td>
                    <td>
                        <button class="btn-secondary btn-sm" 
                                disabled="@(string.IsNullOrWhiteSpace(item.Address))"
                                @onclick="@(e => ShowStockAddress(item))">
                            <span class="oi oi-map-marker"></span>
                        </button>
                    </td>
                    <td>
                        <button class="btn-secondary btn-sm" 
                                disabled="@(string.IsNullOrWhiteSpace(item.PhoneNumber))"
                                @onclick="@(e => ShowStockPhoneNumber(item))">
                            <span class="oi oi-phone"></span>
                        </button>
                    </td>
                    <td>
                        <button class="btn-secondary btn-sm" 
                                disabled="@(string.IsNullOrWhiteSpace(item.Email))"
                                @onclick="@(e => ShowStockEmail(item))">
                            <span class="oi oi-envelope-open"></span>
                        </button>
                    </td>
                    <td style="white-space: nowrap; overflow-x: auto; max-width: 200px;">@item.Description</td>
                </tr>
                }
            </tbody>
        </table>
        <hr />
        <AuthorizeView Roles="Administrator">
            <button class="btn btn-primary float-right" @onclick="@(e => newStockDialog.Show())">
                <span class="oi oi-plus"></span>
                Добавить новый
            </button>
        </AuthorizeView>
    </div>   
</div>
<div class="row py-2">
    <div class="col-md-12 col-sm-12">
        <h1>Производители</h1>
        <table class="table table-hover manufacturers-shipment-period-table w-100">
            <thead class="thead-etk" style="height: 40px;">
                <tr>
                    <th width="90%">Производитель</th>
                    <th width="10%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in manufacturers)
                {
                    <tr>
                        <td><a href="@item.Uri" target="_blank">@item.name</a></td>
                        <td>
                            <button class="btn-secondary btn-sm"
                                    @onclick="@(e => ShowLinkedStocksForBrand(item))">
                                <span class="oi oi-layers"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
}

<AddNewStockDialog @ref="newStockDialog" ConfirmationChanged="NewStockDialogStatusChanged" />

@code {

    List<ManufacturerViewModel> manufacturers = null;
    List<StockPartnerViewModel> stockList = null;
    AddNewStockDialog newStockDialog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            manufacturers = (await manufacturerStorage.GetManufacturers())
                .Select(model => new ManufacturerViewModel(model.manufacturer_id, model.shipment_period)
                {
                    name = model.name,
                    keyword = model.keyword,
                    productsCount = model.productsCount
                })
                .ToList();

            stockList = (await manufacturerStorage.GetStocks())
            .Select(model => new StockPartnerViewModel()
            {
                Id = model.stock_partner_id,
                ShipmentPeriodInDays = model.shipment_period,
                Name = model.name,
                Description = model.description,
                City = model.city,
                CityId = model.city_id,
                Address = model.address,
                PhoneNumber = model.phone_number,
                Email = model.email,
                ShowNameForAll = model.show_name_for_all
            })
            .ToList();
            StateHasChanged();
        }
    }

    private void ShowStockEmail(StockPartnerViewModel stock) => toasts.ShowInfo(stock.Email ?? "Email не заполнен", stock.Name);

    private void ShowStockPhoneNumber(StockPartnerViewModel stock) => toasts.ShowInfo(stock.PhoneNumber ?? "Телефон не заполнен", stock.Name);

    private async void ShowStockAddress(StockPartnerViewModel stock)
    {
        toasts.ShowInfo(stock.Address ?? "Адрес не заполнен", stock.Name);
        if (!string.IsNullOrWhiteSpace(stock.Address))
        {
            string yandexMapUrl = $"https://yandex.ru/maps/?text={stock.Address}";
            try
            {
                await js.InvokeAsync<object>("open", yandexMapUrl, "_blank");
            }
            catch (TaskCanceledException)
            {

            }
        }
    }

    private async Task NewStockDialogStatusChanged(StockPartnerViewModel data)
    {
        if(data != null)
        {
            var stockEntity = new StockPartnerEntity()
            {
                stock_partner_id = data.Id,
                shipment_period = data.ShipmentPeriodInDays,
                city = data.City,
                city_id = data.CityId,
                description = data.Description,
                name = data.Name,
                phone_number = data.PhoneNumber,
                address = data.Address,
                email = data.Email,
                show_name_for_all = data.ShowNameForAll
            };

            if (data.Id == 0)
            {
                await manufacturerStorage.CreateOrUpdateStock(stockEntity);
                data.Id = stockEntity.stock_partner_id;
                stockList.Add(data);

                await logger.Write(LogEntryGroupName.ManufacturerUpdate, "Добавление", $"Склад «{stockEntity.name}» добавлен");
                toasts.ShowSuccess(data.Name, "Склад добавлен");
            }
            else
            {
                await manufacturerStorage.CreateOrUpdateStock(stockEntity);
                await logger.Write(LogEntryGroupName.ManufacturerUpdate, "Обновление", $"Данные склада «{stockEntity.name}» обновлены");
                toasts.ShowSuccess(data.Name, "Склад обновлен");
            }
        }
    }

    private async Task ShowLinkedStocksForBrand(ManufacturerViewModel manufacturer)
    {
        var data = await manufacturerStorage.GetManufacturerStockPartners(manufacturer.Id);

        if (data != null && data.Any())
        {
            string li = string.Join("\r\n", data.Select(i => $"<li>{i.name} - {i.total_products} шт.</li>"));
            RenderFragment messageFragment() => builder =>
            {
                builder.AddContent(1, new MarkupString($"<ul>{li}</ul>"));
            };

            toasts.ShowInfo(messageFragment(), manufacturer.name);
        }
        else
        {
            toasts.ShowInfo("Нет данных по количеству товаров для данного производителя", manufacturer.name);
        }
    }

    private async Task ShowStockLinkedManufacturers(StockPartnerViewModel stock)
    {
        var data = await manufacturerStorage.GetStockManufacturers(stock.Id);

        if (data != null && data.Any())
        {
            string li = string.Join("\r\n", data.Select(i => $"<li>{i.name} - {i.total_products} шт.</li>"));
            RenderFragment messageFragment() => builder =>
            {
                builder.AddContent(1, new MarkupString($"<ul>{li}</ul>"));
            };

            toasts.ShowInfo(messageFragment(), stock.Name);
        }
        else
        {
            toasts.ShowInfo("Нет данных по брендам для данного склада", stock.Name);
        }
    }
}
