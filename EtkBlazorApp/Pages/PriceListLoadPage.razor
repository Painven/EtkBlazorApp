@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject PriceListManager priceListManager
@inject UserLogger logger
@inject ITemplateStorage templateStorage
@inject IToastService toast
@inject ISettingStorage settingStorage

@using System.IO;
@using System.Net;



@if (isFileLoading)
{
    <IntermediateProgressBar />
}

<button class="btn btn-success"
        @onclick="LoadRemoteUriTemplate"
        disabled="@(string.IsNullOrWhiteSpace(selectedTemplate?.RemoteUrl) || isFileLoading)">
    Загрузить от поставщика
</button>
<InputFile OnChange="@UploadSelectedPriceListTemplateFile" disabled="@(selectedTemplate == null || isFileLoading)"></InputFile>

<h2>Выберите шаблон загружаемого файла</h2>

<div class="row my-2">
    <div class="input-group" style="width: 425px;">
        <button type="button" style="margin-left: 8px;" class="btn btn-outline-primary" @onclick="@(e => ApplyFilter(null))">Поиск</button>
        <input type="search"
               @onkeypress="ApplyFilter"
               @oninput="@(ui => searchPhrase = (string)ui.Value)"
               @bind="searchPhrase" class="form-control rounded mx-2" />
    </div>
</div>

<div class="row">
    @foreach (var template in filteredTemplates)
    {
        <CascadingValue Value="selectedTemplate">
            <PriceListTemplateItem Items="@template.Value" CheckedChanged="SelectedTemplateChanged" />
        </CascadingValue>
    }
</div>

<hr />

@if (selectedTemplate != null)
{
    <h4>Примечания к выбранному шаблону <storng>(@selectedTemplate.Title)</storng></h4>
    <textarea readonly class="price-list-template-description">@selectedTemplate.Description</textarea>  
    @if (selectedTemplate.Nds)
    {
    <p>
        <strong style="color: red;">прибавляется НДС</strong>
    </p>
    }   
    <p>
        Наценка:
        @if (editingTemplate == selectedTemplate)
        {
            <input type="number" style="display: inline; width: 80px;" class="form-control mx-2" @bind="editingTemplate.Discount" />
            <button class="btn btn-outline-success" @onclick="SaveTemplateDiscount">
                <span class="oi oi-circle-check" style="font-size: 16px;"></span>
            </button>
        }
        else
        {
            <strong style="color: red;">@(selectedTemplate.Discount.ToString("G29"))%</strong>
            <button class="btn btn-sm btn-outline-success mx-2" @onclick="(e => editingTemplate = selectedTemplate)">
                <span class="oi oi-pencil"></span>
            </button>
        }
    </p>
    @if (selectedTemplate.RemoteUrl != null)
    {
        <p>Прямая ссылка на файл: <a href="@selectedTemplate.RemoteUrl" target="_blank">@selectedTemplate.RemoteUrl</a></p>
    }
    <hr />
}

@if (priceListManager.LoadedFiles != null && priceListManager.LoadedFiles.Any())
{
    <a href="/update-products" class="btn btn-lg btn-outline-primary">Перейти к обновлению товаров</a>
}

@code
{
    const int MAX_UPLOAD_FILE_SIZE = 15_000_000; // 15 мб
    string searchPhrase;
    Dictionary<string, List<PriceListTemplateItemViewModel>> templates = null;
    Dictionary<string, List<PriceListTemplateItemViewModel>> filteredTemplates;
    PriceListTemplateItemViewModel selectedTemplate = null;
    PriceListTemplateItemViewModel editingTemplate = null;
    bool isFileLoading = false;

    protected override async Task OnInitializedAsync()
    {
        templates = (await templateStorage.GetPriceListTemplates())
            .Select(t => new PriceListTemplateItemViewModel(t.id)
            {
                Description = t.description,
                Discount = t.discount,
                GroupName = t.group_name,
                Image = t.image,
                Manufacturer = t.manufacturer,
                PriceListType = t.price_list_type,
                RemoteUrl = t.remote_uri,
                Title = t.title,
                Nds = t.nds
            })
            .GroupBy(template => template.GroupName ?? "<Без группы>")
            .OrderBy(g => g.Key == "Symmetron" ? 0 : 1)
            .ThenBy(g => g.Key)
            .ToDictionary(i => i.Key, i => i.ToList());
        filteredTemplates = templates;
    }

    private async Task UploadSelectedPriceListTemplateFile(InputFileChangeEventArgs e)
    {
        isFileLoading = true;

        var stream = e.File.OpenReadStream(MAX_UPLOAD_FILE_SIZE);
        await LoadTemplateFromStream(stream);
    }

    private async Task LoadRemoteUriTemplate()
    {
        isFileLoading = true;
        StateHasChanged();

        using (var wc = new WebClient())
        {

            string login = await settingStorage.GetValue($"price-list-template-credentials-{selectedTemplate.Title}-login");
            string password = await settingStorage.GetValue($"price-list-template-credentials-{selectedTemplate.Title}-password");
            bool hasCredentials = !string.IsNullOrWhiteSpace(login) && !string.IsNullOrWhiteSpace(password);
            if (hasCredentials)
            {
                wc.Credentials = new NetworkCredential(login, password);
            }

            var bytes = await Task.Run(() => wc.DownloadData(new Uri(selectedTemplate.RemoteUrl)));
            using (var ms = new MemoryStream(bytes))
            {
                await LoadTemplateFromStream(ms);
            }
        }
    }

    private async Task LoadTemplateFromStream(Stream stream)
    {
        try
        {
            await priceListManager.UploadTemplate(selectedTemplate.Type, stream);
            int readedLines = priceListManager.LoadedFiles.Last().ReadedPriceLines.Count;
            toast.ShowSuccess($"Файл считан ({readedLines} строк)", selectedTemplate.Title);
        }
        catch(NotFoundedPriceListTemplateException)
        {
            toast.ShowError($"Шаблон не реализован!", selectedTemplate.Title);
        }
        catch (Exception ex)
        {
            toast.ShowError("Ошибка: " + ex.Message, selectedTemplate.Title);
        }
        finally
        {
            isFileLoading = false;
            selectedTemplate = null;
            StateHasChanged();
        }

    }

    private void SelectedTemplateChanged(PriceListTemplateItemViewModel e)
    {
        editingTemplate = null;
        selectedTemplate = e;
    }

    private async Task SaveTemplateDiscount()
    {
        await templateStorage.ChangePriceListTemplateDiscount(selectedTemplate.Guid, selectedTemplate.Discount);
        editingTemplate = null;
        toast.ShowSuccess("Скидка изменена");
        await logger.Write(LogEntryGroupName.TemplateUpdate, "Обновлено", $"Скидка для шаблона {selectedTemplate.Title} изменена на {selectedTemplate.Discount.ToString("G29")}");
    }

    private void ApplyFilter(KeyboardEventArgs e)
    {
        if (e == null || e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(searchPhrase))
            {
                filteredTemplates = templates
                    .Where(g => g.Key.Contains(searchPhrase) ||
                                g.Value.Any(t => t.Title.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0) ||
                                g.Value.Any(t => t.Manufacturer != null && t.Manufacturer.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0)
                            )
                    .ToDictionary(g => g.Key, g => g.Value);
            }
            else
            {
                filteredTemplates = templates;
            }
        }
    }
}
