@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject PriceListManager priceListManager
@inject UserLogger logger
@inject NavigationManager navManager
@inject RemoteTemplateFileLoaderFactory remoteTemplateFileLoaderFactory
@inject IPriceListTemplateStorage templateStorage
@inject IToastService toast

<div class="my-2" style="margin-left: -15px; margin-right: -15px;">
    @if (isFileUploading)
    {
        <h3>Загрузка файла на сервер</h3>
        <BootstrapProgressBar CurrentProgress="@uploadProgress.Value.Percent">
            <LabelText>
                <span class="justify-content-center d-flex position-absolute w-100">
                    @($"{uploadProgress.Value.Percent}% ({ uploadProgress.Value.ReadedKb } кб из {uploadProgress.Value.TotalKb } кб)")
                </span>
            </LabelText>
        </BootstrapProgressBar>
    }
    @if (isIntermediateProgress)
    {
        <h3>Обработка данных</h3>
        <IntermediateProgressBar></IntermediateProgressBar>
    }
</div>

<div class="row my-2">
    <div class="form-group">
        <button class="btn btn-success" @onclick="LoadRemoteUriTemplate"
                disabled="@(!selectedTemplateHasRemoteUri || isBusy)">
            <span class="oi oi-cloud-download"></span>
            Загрузить от поставщика
        </button>
        <button class="btn btn-success" @onclick="LoadRemoteUriTemplate"
                disabled="@(!selectedTemplateHasEmailSource || isBusy)">
            <span class="oi oi-envelope-open"></span>
            Загрузить из почты
        </button>
        <button class="btn btn-success file-input-zone"
               for="price-list-input"
               disabled="@(selectedTemplate == null || isBusy)">
            <InputFile OnChange="UploadSelectedPriceListTemplateFile" 
                       accept=".xlsx, .xls, .csv, .xml" 
                       disabled="@(selectedTemplate == null || isBusy)"></InputFile>
            <span class="oi oi-paperclip"></span>
            <span>Загрузить с компьютера</span>
        </button>     

    </div>
</div>

<h2>Выберите шаблон загружаемого файла</h2>

<div class="row my-2">
    <div class="input-group px-2" style="width: 425px;">
        <button class="btn btn-outline-primary @(filterHasUri ? "active" : "")"
                @onclick="@(e => { filterHasUri = !filterHasUri; ApplyFilter(null); } )">
            <span class="oi oi-cloud-download"></span>
        </button>
        <button class="mx-1 btn btn-outline-primary @(filterFromEmail ? "active" : "")"
                @onclick="@(e => { filterFromEmail = !filterFromEmail; ApplyFilter(null); } )">
            <span class="oi oi-envelope-open"></span>
        </button>

        <input type="search"
               @onkeypress="ApplyFilter"
               @oninput="@(e => { searchPhrase = (string)e.Value; ApplyFilter(null); })"
               @bind="searchPhrase" class="form-control rounded mx-2" />
    </div>

    <AuthorizeView Roles="Administrator">
        <div class="d-inline px-2">
            <button class="btn btn-outline-primary mx-1"
                    @onclick="@(e => navManager.NavigateTo($"/price-list/new"))">
                <span class="oi oi-plus"></span>
            </button>

            <button class="btn btn-outline-primary mx-1"
                    disabled="@(selectedTemplate == null)"
                    @onclick="@(e => navManager.NavigateTo($"/price-list/edit/{selectedTemplate?.Guid}"))">
                <span class="oi oi-pencil"></span>
            </button>
        </div>
    </AuthorizeView>
</div>

<div class="row my-2">
    @foreach (var template in filteredTemplates)
    {
        <CascadingValue Value="selectedTemplate">
            <PriceListTemplateItem Items="@template.Value" CheckedChanged="SelectedTemplateChanged" />
        </CascadingValue>
    }
</div>

<hr />

@if (selectedTemplate != null)
{
    <div class="row my-2">
        <div class="col-md-12">
            <h4>@selectedTemplate.Title</h4>
            @if (selectedTemplate.Nds)
            {
                <strong style="color: red; margin-right: 10px;">+ НДС | </strong>
            }
            <strong>Наценка: </strong>
            @if (editingTemplate == selectedTemplate)
            {
                <input type="number" style="display: inline; width: 80px;" class="form-control mx-2" @bind="editingTemplate.Discount" />
                <button class="btn btn-outline-success" @onclick="SaveTemplateDiscount">
                    <span class="oi oi-circle-check" style="font-size: 16px;"></span>
                </button>
            }
            else
            {
                <strong style="color: red;">@(selectedTemplate.Discount.ToString("G29"))%</strong>
                <button class="btn btn-sm btn-outline-success mx-2" @onclick="(e => editingTemplate = selectedTemplate)">
                    <span class="oi oi-pencil"></span>
                </button>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(selectedTemplate.Description))
        {
            <textarea readonly class="price-list-template-description">@selectedTemplate.Description</textarea>
        }
        @if (!string.IsNullOrWhiteSpace(selectedTemplate.RemoteUrl) && !selectedTemplateHasEmailSource)
        {
            <p>Прямая ссылка на файл: <a href="@selectedTemplate.RemoteUrl" target="_blank">@selectedTemplate.RemoteUrl</a></p>
        }
    </div>
}

@code
{
    const int MAX_UPLOAD_FILE_SIZE = 15_000_000; // 15 мб
    const int UPLOAD_BUFFER_SIZE = 64_000; // 64 кб

    Dictionary<string, List<PriceListTemplateItemViewModel>> templates = null;
    Dictionary<string, List<PriceListTemplateItemViewModel>> filteredTemplates;
    PriceListTemplateItemViewModel selectedTemplate = null;
    PriceListTemplateItemViewModel editingTemplate = null;

    bool isIntermediateProgress = false;
    bool isFileUploading = false;
    bool isBusy => isIntermediateProgress || isFileUploading;
    bool selectedTemplateHasEmailSource => !string.IsNullOrWhiteSpace(selectedTemplate?.EmailSearchCriteria_Sender);
    bool selectedTemplateHasRemoteUri => !string.IsNullOrWhiteSpace(selectedTemplate?.RemoteUrl);
    FileLoadProgress? uploadProgress;

    string searchPhrase;
    bool filterHasUri;
    bool filterFromEmail;

    protected override async Task OnInitializedAsync()
    {
        templates = (await templateStorage.GetPriceListTemplates())
            .Select(t => new PriceListTemplateItemViewModel(t.id)
            {
                Description = t.description,
                Discount = t.discount,
                GroupName = t.group_name,
                Image = t.image,
                RemoteUrl = t.remote_uri,
                RemoteUrlMethodName = t.remote_uri_method_name,
                EmailSearchCriteria_Sender = t.email_criteria_sender,
                Title = t.title,
                Nds = t.nds
            })
            .GroupBy(template => template.GroupName ?? "<Без группы>")
            .OrderBy(g => g.Key == "Symmetron" ? 0 : 1)
            .ThenBy(g => g.Key)
            .ToDictionary(i => i.Key, i => i.ToList());

        filteredTemplates = templates;
    }

    private async Task UploadSelectedPriceListTemplateFile(InputFileChangeEventArgs e)
    {
        if (!InvalidateFileSize(e.File.Size)) { return; }

        isFileUploading = true;

        var indicator = new Progress<FileLoadProgress>(v => { uploadProgress = v; StateHasChanged(); });
        uploadProgress = FileLoadProgress.Started;

        using (var ms = await e.File.OpenReadStream(MAX_UPLOAD_FILE_SIZE).ToMemoryStreamWithProgress(UPLOAD_BUFFER_SIZE, (int)e.File.Size, indicator))
        {
            isFileUploading = false;
            StateHasChanged();

            await LoadTemplateFromStream(ms, e.File.Name);
        }

        uploadProgress = null;
    }

    private async Task LoadRemoteUriTemplate()
    {
        isIntermediateProgress = true;
        StateHasChanged();

        IRemoteTemplateFileLoader loader = remoteTemplateFileLoaderFactory.GetMethod(
            selectedTemplate.RemoteUrl,
            selectedTemplate.RemoteUrlMethodName,
            selectedTemplate.Guid);

        try
        {
            var fileInfo = await loader.GetFile();
            using (var ms = new MemoryStream(fileInfo.Bytes))
            {
                await LoadTemplateFromStream(ms, fileInfo.FileName);
            }
        }
        catch (WebException webEx) when (webEx.Status == WebExceptionStatus.ProtocolError)
        {
            toast.ShowError("Файл недоступен", selectedTemplate.Title);
        }
        catch (Exception ex)
        {
            toast.ShowError("Не удалось загрузить файл: " + selectedTemplate.RemoteUrl + ". Ошибка: " + ex.Message, selectedTemplate.Title);
        }
        finally
        {
            isIntermediateProgress = false;
        }

    }

    private async Task LoadTemplateFromStream(Stream stream, string fileName)
    {
        isIntermediateProgress = true;
        StateHasChanged();

        try
        {
            await priceListManager.UploadTemplate(selectedTemplate.Type, stream, fileName);
            int readedLines = priceListManager.LoadedFiles.Last().ReadedPriceLines.Count;

            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Файл загружен", $"Загружен прайс-лист '{selectedTemplate.Title} ({readedLines} строк)'");
            toast.ShowSuccess($"Файл считан ({readedLines} строк)", selectedTemplate.Title);
        }
        catch (NotFoundedPriceListTemplateException)
        {
            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Ошибка загрузки", $"Шаблон для '{selectedTemplate.Title}' не реализован'");
            toast.ShowError($"Шаблон не реализован!", selectedTemplate.Title);
        }
        catch (Exception ex)
        {
            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Ошибка загрузки", $"Ошибка загрузки файла с шаблоном {selectedTemplate.Title}. Ошибка: {ex.Message}");
            toast.ShowError(ex.Message, selectedTemplate.Title);
        }
        finally
        {
            isIntermediateProgress = false;
            selectedTemplate = null;
            StateHasChanged();
        }

    }

    private void SelectedTemplateChanged(PriceListTemplateItemViewModel e)
    {
        editingTemplate = null;
        selectedTemplate = e;
    }

    private async Task SaveTemplateDiscount()
    {
        await templateStorage.ChangePriceListTemplateDiscount(selectedTemplate.Guid, selectedTemplate.Discount);
        editingTemplate = null;
        toast.ShowSuccess("Скидка изменена");
        await logger.Write(LogEntryGroupName.TemplateUpdate, "Обновлено", $"Скидка для шаблона {selectedTemplate.Title} ({selectedTemplate.Guid}) изменена на {selectedTemplate.Discount.ToString("G29")}");
    }

    private void ApplyFilter(KeyboardEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchPhrase) && !filterHasUri && !filterFromEmail)
        {
            filteredTemplates = templates;
        }
        else
        {
            searchPhrase = searchPhrase ?? string.Empty;

            filteredTemplates = templates
                .Where(g => FilterPredicate(g.Value))
                .ToDictionary(g => g.Key, g => g.Value);
        }
    }

    private bool FilterPredicate(List<PriceListTemplateItemViewModel> items)
    {
        bool isMatch = false;

        if (!string.IsNullOrWhiteSpace(searchPhrase))
        {
            bool hasTitle = items.Any(t => t.Title.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0);
            bool hasDescription = items.Any(t => t.Title.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0);

            isMatch = hasTitle || hasDescription;
            if(isMatch)
            {
                return true;
            }
        }
        if (filterHasUri)
        {
            isMatch = items.Any(t => !string.IsNullOrEmpty(t.RemoteUrl));
            if (isMatch)
            {
                return true;
            }
        }
        if (filterFromEmail)
        {
            isMatch = items.Any(t => !string.IsNullOrEmpty(t.EmailSearchCriteria_Sender));
            if (isMatch)
            {
                return true;
            }
        }

        return false;
    }

    private bool InvalidateFileSize(long fileSize)
    {
        if (fileSize >= MAX_UPLOAD_FILE_SIZE)
        {
            string maxSizeString = ((double)MAX_UPLOAD_FILE_SIZE / 1E6).ToString("F2") + " МБ";
            string currentSizeString = ((double)fileSize / 1E6).ToString("F2") + " МБ";

            toast.ShowError($"Размер файла слишком большой - Максимальный: {maxSizeString} - Текущий: {currentSizeString}", "Ошибка"); ;
            return false;
        }
        return true;
    }
}
