@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject PriceListManager priceListManager
@inject ITemplateStorage templateStorage

@using System.IO;
@using System.Threading;



@if (isFileLoading)
{
    <IntermediateProgressBar />
}
else
{
    <button class="btn btn-success"
            @onclick="LoadRemoteUriTemplate"
            disabled="@(string.IsNullOrWhiteSpace(selectedTemplate?.RemoteUrl))">
        Загрузить от поставщика
    </button>
    <InputFile OnChange="@UploadSelectedPriceListTemplateFile" disabled="@(selectedTemplate == null)"></InputFile>

    <h2>Выберите шаблон загружаемого файла</h2>
}

<div class="row">
    @foreach (var template in templates)
    {
        <PriceListTemplateItem Items="@template.Value"
                               CheckedChanged="(e => selectedTemplate = (PriceListTemplateItemViewModel)e)"></PriceListTemplateItem>
    }
</div>

<hr />

@if (selectedTemplate != null)
{
    <h4>Примечания к выбранному шаблону</h4>
    <textarea readonly class="price-list-template-description">@selectedTemplate.Description</textarea>
    @if (selectedTemplate.RemoteUrl != null)
    {
        <p>Прямая ссылка на файл: <a href="@selectedTemplate.RemoteUrl" target="_blank">@selectedTemplate.RemoteUrl</a></p>
    }
    <hr />
}

@if (priceListManager.LoadedFiles != null && priceListManager.LoadedFiles.Any())
{
    <a href="/update-products" class="btn btn-lg btn-outline-primary">Перейти к обновлению товаров</a>
}

@code
{
    const int MAX_UPLOAD_SIZE = 15_000_000; // 15 мб

    Dictionary<string, List<PriceListTemplateItemViewModel>> templates = null;
    PriceListTemplateItemViewModel selectedTemplate = null;
    bool isFileLoading = false;

    protected override async Task OnInitializedAsync()
    {
        templates = (await templateStorage.GetPriceListTemplates())
            .Select(t => new PriceListTemplateItemViewModel()
            {
                Guid = t.id,
                Description = t.description,
                Discount = t.discount,
                GroupName = t.group_name,
                Image = t.image,
                Manufacturer = t.manufacturer,
                PriceListType = t.price_list_type,
                RemoteUrl = t.remote_uri,
                Title = t.title
            })
            .GroupBy(template => template.GroupName ?? "<Без группы>")
            .ToDictionary(i => i.Key, i => i.ToList());
    }

    private async Task UploadSelectedPriceListTemplateFile(InputFileChangeEventArgs e)
    {
        isFileLoading = true;

        var stream = e.File.OpenReadStream(MAX_UPLOAD_SIZE);
        long fileLength = e.File.Size;

        await LoadRemoteTemplateFromStream(stream, fileLength);
    }

    private async Task LoadRemoteUriTemplate()
    {
        isFileLoading = true;

        var response = await (new HttpClient().GetAsync(selectedTemplate.RemoteUrl));
        var stream = await response.Content.ReadAsStreamAsync();
        long fileLength = (long)response.Content.Headers.ContentLength;
        await LoadRemoteTemplateFromStream(stream, fileLength);
    }

    private async Task LoadRemoteTemplateFromStream(Stream stream, long fileLength)
    {
        await priceListManager.UploadTemplate(selectedTemplate.Type, stream, fileLength);

        isFileLoading = false;
        selectedTemplate = null;
        StateHasChanged();
    }
}
