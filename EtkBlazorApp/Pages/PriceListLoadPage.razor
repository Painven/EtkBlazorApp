@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject PriceListManager priceListManager
@inject UserLogger logger
@inject RemoteTemplateFileLoaderFactory remoteTemplateFileLoaderFactory
@inject ITemplateStorage templateStorage
@inject IToastService toast
@using System.Threading

@if (isBusy)
{
    if (isFileUploading)
    {
        <h3>Загрузка файла на сервер</h3>
        <BootstrapProgressBar CurrentProgress="uploadPercent"></BootstrapProgressBar>
    }
    if (isIntermediateProgress)
    {
        <h3>Обработка данных</h3>
        <IntermediateProgressBar></IntermediateProgressBar>
    }
}


<button class="btn btn-success" @onclick="LoadRemoteUriTemplate" disabled="@(string.IsNullOrWhiteSpace(selectedTemplate?.RemoteUrl) || isBusy)">
    Загрузить от поставщика
</button>
<InputFile OnChange="@UploadSelectedPriceListTemplateFile" disabled="@(selectedTemplate == null || isBusy)">
</InputFile>

<h2>Выберите шаблон загружаемого файла</h2>

<div class="row my-2">
    <div class="input-group" style="width: 425px;">
        <button type="button" style="margin-left: 8px;" class="btn btn-outline-primary">
            <span class="oi oi-magnifying-glass"></span>
        </button>
        <input type="search"
               @onkeypress="ApplyFilter"
               @oninput="@(e => searchPhrase = (string)e.Value)"
               @bind="searchPhrase" class="form-control rounded mx-2" />
    </div>
    <div class="d-inline">
        <div class="btn-group-toggle" data-toggle="buttons">
            <label class="btn btn-outline-primary @(filterHasPrice ? "active" : "")">
                <input type="checkbox" checked="@filterHasPrice" autocomplete="off" 
                       style="cursor: pointer;"
                       @onchange="@(e => { filterHasPrice = (bool)e.Value; ApplyFilter(null); })"> Цена
            </label>
            <label class="btn btn-outline-primary @(filterHasQuantity ? "active" : "")">
                <input type="checkbox" checked="@filterHasQuantity" autocomplete="off" 
                       style="cursor: pointer;"
                       @onchange="@(e => { filterHasQuantity = (bool)e.Value; ApplyFilter(null); })"> Остатки
            </label>
            <label class="btn btn-outline-primary @(filterHasUri ? "active" : "")">
                <input type="checkbox" checked="@filterHasUri" autocomplete="off" 
                       style="cursor: pointer;"
                       @onchange="@(e => { filterHasUri = (bool)e.Value; ApplyFilter(null); })"> Ссылка
            </label>
        </div>
    </div>
</div>

<div class="row">
    @foreach (var template in filteredTemplates)
    {
        <CascadingValue Value="selectedTemplate">
            <PriceListTemplateItem Items="@template.Value" CheckedChanged="SelectedTemplateChanged" />
        </CascadingValue>
    }
</div>

<hr />

@if (selectedTemplate != null)
{
    <h4>Примечания к выбранному шаблону <storng>(@selectedTemplate.Title)</storng></h4>
    <textarea readonly class="price-list-template-description">@selectedTemplate.Description</textarea>
    @if (selectedTemplate.PriceListType == PriceListType.Price || selectedTemplate.PriceListType == PriceListType.Both)
    {
        @if (selectedTemplate.Nds)
        {
            <p>
                <strong style="color: red;">прибавляется НДС</strong>
            </p>
        }
        <p>
            Наценка:
            @if (editingTemplate == selectedTemplate)
            {
                <input type="number" style="display: inline; width: 80px;" class="form-control mx-2" @bind="editingTemplate.Discount" />
                <button class="btn btn-outline-success" @onclick="SaveTemplateDiscount">
                    <span class="oi oi-circle-check" style="font-size: 16px;"></span>
                </button>
            }
            else
            {
                <strong style="color: red;">@(selectedTemplate.Discount.ToString("G29"))%</strong>
                <button class="btn btn-sm btn-outline-success mx-2" @onclick="(e => editingTemplate = selectedTemplate)">
                    <span class="oi oi-pencil"></span>
                </button>
            }
        </p>
    }
    @if (selectedTemplate.RemoteUrl != null)
    {
        <p>Прямая ссылка на файл: <a href="@selectedTemplate.RemoteUrl" target="_blank">@selectedTemplate.RemoteUrl</a></p>
    }
    <hr />
}

@code
{
    const int MAX_UPLOAD_FILE_SIZE = 15_000_000; // 15 мб
    const int UPLOAD_BUFFER_SIZE = 16_000; // 32 кб

    Dictionary<string, List<PriceListTemplateItemViewModel>> templates = null;
    Dictionary<string, List<PriceListTemplateItemViewModel>> filteredTemplates;
    PriceListTemplateItemViewModel selectedTemplate = null;
    PriceListTemplateItemViewModel editingTemplate = null;

    bool isIntermediateProgress = false;
    bool isFileUploading = false;
    bool isBusy => isIntermediateProgress || isFileUploading;
    int uploadPercent = 0;

    string searchPhrase;
    bool filterHasPrice;
    bool filterHasQuantity;
    bool filterHasUri;
    bool hasCheckedFilter => filterHasPrice || filterHasQuantity || filterHasUri;

    protected override async Task OnInitializedAsync()
    {
        templates = (await templateStorage.GetPriceListTemplates())
            .Select(t => new PriceListTemplateItemViewModel(t.id)
            {
                Description = t.description,
                Discount = t.discount,
                GroupName = t.group_name,
                Image = t.image,
                Manufacturer = t.manufacturer,
                PriceListType = (PriceListType)t.price_list_type,
                RemoteUrl = t.remote_uri,
                RemoteUrlMethod = t.remote_uri_method,
                Title = t.title,
                Nds = t.nds
            })
            .GroupBy(template => template.GroupName ?? "<Без группы>")
            .OrderBy(g => g.Key == "Symmetron" ? 0 : 1)
            .ThenBy(g => g.Key)
            .ToDictionary(i => i.Key, i => i.ToList());

        filteredTemplates = templates;
    }

    private async Task UploadSelectedPriceListTemplateFile(InputFileChangeEventArgs e)
    {
        isFileUploading = true;
        uploadPercent = 0;
        var bytes = new byte[(int)e.File.Size];

        using (var uploadStream = e.File.OpenReadStream(MAX_UPLOAD_FILE_SIZE))
        {
            int readed = 0;

            while ((readed += await uploadStream.ReadAsync(bytes, readed, Math.Min(UPLOAD_BUFFER_SIZE, bytes.Length - readed))) < bytes.Length)
            {
                uploadPercent = (int)(((double)readed / bytes.Length) * 100);
                StateHasChanged();
            }
        }

        isFileUploading = false;
        StateHasChanged();

        using (var ms = new MemoryStream(bytes))
        {
            await LoadTemplateFromStream(ms, e.File.Name);
        }
    }

    private async Task LoadRemoteUriTemplate()
    {
        isIntermediateProgress = true;
        StateHasChanged();

        IRemoteTemplateFileLoader loader = remoteTemplateFileLoaderFactory.GetMethod(selectedTemplate.RemoteUrl, selectedTemplate.RemoteUrlMethod, selectedTemplate.Guid);
        using (var ms = new MemoryStream(await loader.GetBytes()))
        {
            await LoadTemplateFromStream(ms, Path.GetFileName(selectedTemplate.RemoteUrl));
        }
    }

    private async Task LoadTemplateFromStream(Stream stream, string fileName)
    {
        isIntermediateProgress = true;
        StateHasChanged();

        try
        {
            await priceListManager.UploadTemplate(selectedTemplate.Type, stream, fileName);
            int readedLines = priceListManager.LoadedFiles.Last().ReadedPriceLines.Count;

            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Файл загружен", $"Загружен прайс-лист '{selectedTemplate.Title} ({readedLines} строк)'");
            toast.ShowSuccess($"Файл считан ({readedLines} строк)", selectedTemplate.Title);
        }
        catch (NotFoundedPriceListTemplateException)
        {
            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Ошибка загрузки", $"Шаблон для '{selectedTemplate.Title}' не реализован'");
            toast.ShowError($"Шаблон не реализован!", selectedTemplate.Title);
        }
        catch (Exception ex)
        {
            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Ошибка загрузки", $"Ошибка загрузки файла с шаблоном {selectedTemplate.Title}. Ошибка: {ex.Message}");
            toast.ShowError("Ошибка: " + ex.Message, selectedTemplate.Title);
        }
        finally
        {
            isIntermediateProgress = false;
            selectedTemplate = null;
            StateHasChanged();
        }

    }

    private void SelectedTemplateChanged(PriceListTemplateItemViewModel e)
    {
        editingTemplate = null;
        selectedTemplate = e;
    }

    private async Task SaveTemplateDiscount()
    {
        await templateStorage.ChangePriceListTemplateDiscount(selectedTemplate.Guid, selectedTemplate.Discount);
        editingTemplate = null;
        toast.ShowSuccess("Скидка изменена");
        await logger.Write(LogEntryGroupName.TemplateUpdate, "Обновлено", $"Скидка для шаблона {selectedTemplate.Title} ({selectedTemplate.Guid}) изменена на {selectedTemplate.Discount.ToString("G29")}");
    }

    private void ApplyFilter(KeyboardEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchPhrase) && !hasCheckedFilter)
        {
            filteredTemplates = templates;
        }
        else if(!string.IsNullOrWhiteSpace(searchPhrase))
        {
            var titlePredicate = new Func<List<PriceListTemplateItemViewModel>, bool>((v) => v.Any(t => t.Title.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0));
            var descriptionPredicate = new Func<List<PriceListTemplateItemViewModel>, bool>((v) => v.Any(t => t.Description.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0));

            filteredTemplates = templates
                .Where(g => titlePredicate(g.Value) || descriptionPredicate(g.Value))
                .ToDictionary(g => g.Key, g => g.Value);
        }
        else if (hasCheckedFilter)
        {
            searchPhrase = string.Empty;

            var pricePredicate = new Func<List<PriceListTemplateItemViewModel>, bool>((v) 
                => filterHasPrice ? (v.Any(t => t.PriceListType == PriceListType.Both || t.PriceListType == PriceListType.Price)) : false);
            var quantityPredicate = new Func<List<PriceListTemplateItemViewModel>, bool>((v) 
                => filterHasQuantity ? (v.Any(t => t.PriceListType == PriceListType.Both || t.PriceListType == PriceListType.Quantity)) : false);
            var uriPredicate = new Func<List<PriceListTemplateItemViewModel>, bool>((v) 
                => filterHasUri ? (v.Any(t => !string.IsNullOrWhiteSpace(t.RemoteUrl))) : false);

            filteredTemplates = templates
                .Where(g => pricePredicate(g.Value) || quantityPredicate(g.Value) || uriPredicate(g.Value))
                .ToDictionary(g => g.Key, g => g.Value);
        }
    }

}
