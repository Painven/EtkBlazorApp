@page "/load-price-list"
@attribute [Authorize(Roles = "Administrator, Manager")]
@inject PriceListManager priceListManager
@inject UserLogger logger
@inject RemoteTemplateFileLoaderFactory remoteTemplateFileLoaderFactory
@inject ITemplateStorage templateStorage
@inject IToastService toast
@using System.Threading

<div class="row my-2">
    @if (isFileUploading)
    {
    <h3>Загрузка файла на сервер</h3>
    <BootstrapProgressBar CurrentProgress="@uploadPercent" IsAnimated="@true" IsStripped="@true"></BootstrapProgressBar>
    }
    @if (isIntermediateProgress)
    {
    <h3>Обработка данных</h3>
    <IntermediateProgressBar></IntermediateProgressBar>
    }
    
    <div class="form-group">
        <button class="btn btn-success" @onclick="LoadRemoteUriTemplate" disabled="@(string.IsNullOrWhiteSpace(selectedTemplate?.RemoteUrl) || isBusy)">
            Загрузить от поставщика
        </button>
        <InputFile OnChange="UploadSelectedPriceListTemplateFile"
                   accept=".xlsx, .xls, .csv, .xml" disabled="@(selectedTemplate == null || isBusy)"></InputFile>
    </div>
</div>

<h2>Выберите шаблон загружаемого файла</h2>

<div class="row my-2">
    <div class="input-group" style="width: 425px;">
        <button type="button" style="margin-left: 8px;" class="btn btn-outline-primary">
            <span class="oi oi-magnifying-glass"></span>
        </button>
        <input type="search"
               @onkeypress="ApplyFilter"
               @oninput="@(e => { searchPhrase = (string)e.Value; ApplyFilter(null); })"
               @bind="searchPhrase" class="form-control rounded mx-2" />
    </div>
    <div class="d-inline">
        <button class="btn btn-outline-primary @(filterHasUri ? "active" : "")"
                @onclick="@(e => {filterHasUri = !filterHasUri; ApplyFilter(null); })">
            <span class="oi oi-link-intact"></span>
        </button>
    </div>
</div>

<div class="row my-2">
    @foreach (var template in filteredTemplates)
    {
    <CascadingValue Value="selectedTemplate">
        <PriceListTemplateItem Items="@template.Value" CheckedChanged="SelectedTemplateChanged" />
    </CascadingValue>
    }
</div>

<hr />

@if (selectedTemplate != null)
{
<div class="row my-2">
    <div class="col-md-12">
        <h4>@selectedTemplate.Title</h4>
        @if ((selectedTemplate.PriceListType == PriceListType.Price || selectedTemplate.PriceListType == PriceListType.Both))
        {
        if (selectedTemplate.Nds)
        {
        <strong style="color: red; margin-right: 10px;">+ НДС | </strong>
        }
        <strong>Наценка: </strong>
        if (editingTemplate == selectedTemplate)
        {
        <input type="number" style="display: inline; width: 80px;" class="form-control mx-2" @bind="editingTemplate.Discount" />
        <button class="btn btn-outline-success" @onclick="SaveTemplateDiscount">
            <span class="oi oi-circle-check" style="font-size: 16px;"></span>
        </button>
        }
        else
        {
        <strong style="color: red;">@(selectedTemplate.Discount.ToString("G29"))%</strong>
        <button class="btn btn-sm btn-outline-success mx-2" @onclick="(e => editingTemplate = selectedTemplate)">
            <span class="oi oi-pencil"></span>
        </button>
        }
        }
    </div>
    @if(!string.IsNullOrWhiteSpace(selectedTemplate.Description))
    {
    <textarea readonly class="price-list-template-description">@selectedTemplate.Description</textarea>
    }
    @if (selectedTemplate.RemoteUrl != null)
    {
    <p>Прямая ссылка на файл: <a href="@selectedTemplate.RemoteUrl" target="_blank">@selectedTemplate.RemoteUrl</a></p>
    }
</div>
}

@code
{
    const int MAX_UPLOAD_FILE_SIZE = 15_000_000; // 15 мб
    const int UPLOAD_BUFFER_SIZE = 64_000; // 32 кб

    Dictionary<string, List<PriceListTemplateItemViewModel>> templates = null;
    Dictionary<string, List<PriceListTemplateItemViewModel>> filteredTemplates;
    PriceListTemplateItemViewModel selectedTemplate = null;
    PriceListTemplateItemViewModel editingTemplate = null;

    bool isIntermediateProgress = false;
    bool isFileUploading = false;
    bool isBusy => isIntermediateProgress || isFileUploading;
    int uploadPercent = 0;

    string searchPhrase;
    bool filterHasUri;

    protected override async Task OnInitializedAsync()
    {
        templates = (await templateStorage.GetPriceListTemplates())
            .Select(t => new PriceListTemplateItemViewModel(t.id)
            {
                Description = t.description,
                Discount = t.discount,
                GroupName = t.group_name,
                Image = t.image,
                Manufacturer = t.manufacturer,
                PriceListType = (PriceListType)t.price_list_type,
                RemoteUrl = t.remote_uri,
                RemoteUrlMethod = t.remote_uri_method,
                Title = t.title,
                Nds = t.nds
            })
            .GroupBy(template => template.GroupName ?? "<Без группы>")
            .OrderBy(g => g.Key == "Symmetron" ? 0 : 1)
            .ThenBy(g => g.Key)
            .ToDictionary(i => i.Key, i => i.ToList());

        filteredTemplates = templates;
    }

    private async Task UploadSelectedPriceListTemplateFile(InputFileChangeEventArgs e)
    {
        if (!InvalidMaxFileSize(e.File.Size)) { return; }

        isFileUploading = true;
        uploadPercent = 0;

        var bytes = new byte[(int)e.File.Size];
        using (var uploadStream = e.File.OpenReadStream(MAX_UPLOAD_FILE_SIZE))
        {
            int readed = 0;
            while ((readed += await uploadStream.ReadAsync(bytes, readed, Math.Min(UPLOAD_BUFFER_SIZE, bytes.Length - readed))) < bytes.Length)
            {
                uploadPercent = (int)(((double)readed / bytes.Length) * 100);
                StateHasChanged();
            }
        }

        isFileUploading = false;
        StateHasChanged();

        using (var ms = new MemoryStream(bytes))
        {
            await LoadTemplateFromStream(ms, e.File.Name);
        }

        bytes = null;
        e = null;
    }

    private async Task LoadRemoteUriTemplate()
    {
        isIntermediateProgress = true;
        StateHasChanged();

        IRemoteTemplateFileLoader loader = remoteTemplateFileLoaderFactory.GetMethod(selectedTemplate.RemoteUrl, selectedTemplate.RemoteUrlMethod, selectedTemplate.Guid);
        try
        {
            var fileInfo = await loader.GetFile();
            using (var ms = new MemoryStream(fileInfo.Bytes))
            {
                await LoadTemplateFromStream(ms, fileInfo.FileName);
            }
        }
        catch(WebException webEx) when (webEx.Status == WebExceptionStatus.ProtocolError)
        {
            toast.ShowError("Файл недоступен", selectedTemplate.Title);
        }
        catch (Exception ex)
        {
            toast.ShowError("Не удалось загрузить файл: " + selectedTemplate.RemoteUrl + ". Ошибка: " + ex.Message, selectedTemplate.Title);
        }
        finally
        {
            isIntermediateProgress = false;
        }

    }

    private async Task LoadTemplateFromStream(Stream stream, string fileName)
    {
        isIntermediateProgress = true;
        StateHasChanged();

        try
        {
            await priceListManager.UploadTemplate(selectedTemplate.Type, stream, fileName);
            int readedLines = priceListManager.LoadedFiles.Last().ReadedPriceLines.Count;

            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Файл загружен", $"Загружен прайс-лист '{selectedTemplate.Title} ({readedLines} строк)'");
            toast.ShowSuccess($"Файл считан ({readedLines} строк)", selectedTemplate.Title);
        }
        catch (NotFoundedPriceListTemplateException)
        {
            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Ошибка загрузки", $"Шаблон для '{selectedTemplate.Title}' не реализован'");
            toast.ShowError($"Шаблон не реализован!", selectedTemplate.Title);
        }
        catch (Exception ex)
        {
            await logger.Write(LogEntryGroupName.PriceListTemplateLoad, "Ошибка загрузки", $"Ошибка загрузки файла с шаблоном {selectedTemplate.Title}. Ошибка: {ex.Message}");
            toast.ShowError("Ошибка: " + ex.Message + " --- " + ex.StackTrace, selectedTemplate.Title);
        }
        finally
        {
            isIntermediateProgress = false;
            selectedTemplate = null;
            StateHasChanged();
        }

    }

    private void SelectedTemplateChanged(PriceListTemplateItemViewModel e)
    {
        editingTemplate = null;
        selectedTemplate = e;
    }

    private async Task SaveTemplateDiscount()
    {
        await templateStorage.ChangePriceListTemplateDiscount(selectedTemplate.Guid, selectedTemplate.Discount);
        editingTemplate = null;
        toast.ShowSuccess("Скидка изменена");
        await logger.Write(LogEntryGroupName.TemplateUpdate, "Обновлено", $"Скидка для шаблона {selectedTemplate.Title} ({selectedTemplate.Guid}) изменена на {selectedTemplate.Discount.ToString("G29")}");
    }

    private void ApplyFilter(KeyboardEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchPhrase) && !filterHasUri)
        {
            filteredTemplates = templates;
        }
        else
        {
            var hasSearchMatchInTitle = new Func<List<PriceListTemplateItemViewModel>, bool>((v)
                => string.IsNullOrWhiteSpace(searchPhrase) || v.Any(t => t.Title.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0));
            var hasSearchMatchInDescription = new Func<List<PriceListTemplateItemViewModel>, bool>((v)
                => string.IsNullOrWhiteSpace(searchPhrase) || v.Any(t => t.Description.IndexOf(searchPhrase, StringComparison.OrdinalIgnoreCase) >= 0));
            var hasRemoteFileMatch = new Func<List<PriceListTemplateItemViewModel>, bool>((v)
                => !filterHasUri || (v.Any(t => !string.IsNullOrWhiteSpace(t.RemoteUrl))));

            filteredTemplates = templates
            .Where(g => hasRemoteFileMatch(g.Value) && hasSearchMatchInTitle(g.Value) && hasSearchMatchInTitle(g.Value))
            .ToDictionary(g => g.Key, g => g.Value);
        }
    }

    private bool InvalidMaxFileSize(long fileSize)
    {
        if (fileSize >= MAX_UPLOAD_FILE_SIZE)
        {
            string maxSizeString = ((double)MAX_UPLOAD_FILE_SIZE / 1E6).ToString("F2") + " МБ";
            string currentSizeString = ((double)fileSize / 1E6).ToString("F2") + " МБ";

            toast.ShowError($"Размер файла слишком большой - Максимальный: {maxSizeString} - Текущий: {currentSizeString}", "Ошибка"); ;
            return false;
        }
        return true;
    }
}
