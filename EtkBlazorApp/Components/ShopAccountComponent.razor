@inject NavigationManager navigation
@inject IDatabase database

<div class="row">
        <div class="text-left col-md-2">
        <input type="checkbox" style="margin-right: 14px;transform: scale(2.5);"
               @onchange="(e) => OnCheckboxChecked(e)" />&nbsp;&nbsp;<span style="font-size: 26px;">@ShopAccount.Uri</span>
        </div>
        <div class="col-md-8">
            @if (ShopAccount.IsUpdating)
            {
                <progress style="width: 100%; height: 24px;"></progress>
            }
        </div>
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <div class="text-right col-md-1">
                    <button class="btn btn-secondary my-3 btn-sm" @onclick="@(() => navigation.NavigateTo($"/shop-account/{ShopAccount.Id}"))"><i class="oi oi-pencil"></i></button>
                </div>
                <div class="text-right col-md-1">
                    <button class="btn btn-warning my-3 btn-sm" @onclick="@DeleteClick"><i class="oi oi-delete"></i></button>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>

    <DeleteConfirmDialog @ref="deleteDialog"
                         ConfirmationTitle="Подтверждение удаления"
                         ConfirmationChanged="@DeleteComfirmChanged"
                         ConfirmationMessage="@(() => ShopAccount.Uri)" />

    @code {

        [Parameter]
        public ShopAccountViewModel ShopAccount { get; set; }

        [Parameter]
        public EventCallback OnAccountDeleted { get; set; }

        [Parameter]
        public EventCallback OnChecked { get; set; }

        private DeleteConfirmDialog deleteDialog;

        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
            {
                ShopAccount.ProgressBarStateChanged += () => StateHasChanged();
            }
        }

        private void DeleteClick()
        {
            deleteDialog.Show();
        }

        private void OnCheckboxChecked(ChangeEventArgs e)
        {
            ShopAccount.IsSelected = !ShopAccount.IsSelected;
            OnChecked.InvokeAsync();
        }

        private async Task DeleteComfirmChanged(bool state)
        {
            if (state == true)
            {
                await database.DeleteShopAccounts(ShopAccount.Id);
                await OnAccountDeleted.InvokeAsync();
            }
        }

    }
