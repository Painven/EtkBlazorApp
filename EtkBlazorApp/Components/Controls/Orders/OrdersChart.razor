@using EtkBlazorApp.Model.Chart
@inject IJSRuntime js
@inject IOrderStorage ordersStorage

@if (inProgress)
{
    <LoadingSpinner />
}

<div>
    <canvas id="myChart" />
</div>


@code {
    [Parameter] public ChartDateRange Range { get; set; } = ChartDateRange.Month;
    [Parameter] public ChartKind Kind { get; set; } = ChartKind.ByManufacturer;
    [Parameter] public int MaxItems { get; set; } = 10;

    [Inject] public ChartDataExtractor dataExtractor { get; set; }

    int uniqueOrdersInChart = 0;
    bool inProgress = false;
    bool isRendered = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isRendered && MaxItems != 0)
        {
            StateHasChanged();
            await GenerateChart();
        }
    }

    private async Task GenerateChart()
    {
        inProgress = true;
        StateHasChanged();

        var data = await dataExtractor.GetDataSourceForOrdersChart(Range, Kind, MaxItems);

        string chartTitle = $"Статистика заказов";
        string[] labels = data.Select(c => c.Key).ToArray();
        decimal[] points = data.Select(c => c.Value).ToArray();

        await js.InvokeVoidAsync("GenerateChart", chartTitle, labels, points);
        inProgress = false;
    }

}
