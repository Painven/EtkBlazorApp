@using EtkBlazorApp.Model.Order

<div class="dropdown show order-status-dropdown-container">
    <button href="#"
            type="button"
            id=@($"dropdownOrderStatusLink_{Order.OrderId}")
            @onclick="@(e => isOpened = !isOpened)"
            data-toggle="dropdown"
            aria-haspopup="true"
            aria-expanded="false"
            class=@cssClass>
        <span>@statusIcon</span>
        <span>@(Order?.Status?.Name ?? "Неизвестно")</span>
    </button>
    @if (CanChangeStatus && isOpened)
    {
        <div class="dropdown-menu show" aria-labelledby=@($"dropdownOrderStatusLink_{Order.OrderId}")>
            @foreach (var status in availableOrderStatuses)
            {
                <a href="#" class="dropdown-item" @onclick="@(async e => await ChangeOrderStatus(status))" @onclick:preventDefault>
                    <span>@cssMap[status.Type].Icon</span>
                    <span>@status.Name</span>
                </a>
            }
        </div>
    }
</div>

@code {
    [Parameter] public OrderViewModel Order { get; set; }
    [Parameter] public bool CanChangeStatus { get; set; }

    [Inject] public IOrderStorage OrderRepository { get; set; }
    [Inject] public IOrderUpdateService OrderUpdateSerivce { get; set; }
    [Inject] public IMapper Mapper { get; set; }
    [Inject] public UserLogger Logger { get; set; }

    bool isOpened = false;

    List<OrderStatusViewModel> availableOrderStatuses = new();

    private readonly Dictionary<OrderStatusType, EtkBlazorApp.Model.Order.OrderStatusDisplayData> cssMap = new()
        {
            [OrderStatusType.None] = new("❓", "dark"),
            [OrderStatusType.Created] = new("🔄", "dark"),
            [OrderStatusType.Complectation] = new("📦", "primary"),
            [OrderStatusType.Delivery] = new("🚙", "info"),
            [OrderStatusType.Completed] = new("✔️", "success"),
            [OrderStatusType.WaitingToPickup] = new("🕘", "warning"),
            [OrderStatusType.Canceled] = new("🛑", "light")
        };

    private string cssClass
    {
        get
        {
            string css = "btn order-status-dropdown-button";

            if (Order?.Status != null && cssMap.TryGetValue(Order.Status.Type, out var kvp))
            {
                css += $" btn-{kvp.Background}";
            }

            if (CanChangeStatus)
            {
                css += " dropdown-toggle";
            }
            else
            {
                css += " btn-sm";
            }

            return css;
        }
    }

    private string statusIcon
    {
        get
        {
            if (Order?.Status != null && cssMap.TryGetValue(Order.Status.Type, out var kvp))
            {
                return kvp.Icon;
            }
            return cssMap[OrderStatusType.None].Icon;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CanChangeStatus)
        {
            availableOrderStatuses = Mapper.Map<List<OrderStatusViewModel>>(await OrderRepository.GetOrderStatuses());
            StateHasChanged();
        }
    }

    private async Task ChangeOrderStatus(OrderStatusViewModel status)
    {
        int oldStatus = (int)(Order?.Status?.Type ?? OrderStatusType.None);
        int newStatus = (int)status.Type;
        Order.Status = status;
        isOpened = false;

        StateHasChanged();

        await OrderUpdateSerivce.ChangeOrderStatus(Order.OrderId, newStatus);

        await Logger.Write(LogEntryGroupName.Orders, "Обновление статуса", $"Статус заказа {Order.OrderId} изменен с {Order.Status.Type} на {status.Type}");
    }
}

