@inject ISettingStorage settings
@inject NavigationManager navigation
@implements IDisposable
@using System.Timers

<tr>
    <td>
        <div class="task-tool-items-box">
            <input type="checkbox" @onchange="EnableStatusChanged" checked="@IsEnabled" />
            <a href="@("/task-settings/" + Prefix)"><span class="oi oi-cog cog-icon" aria-hidden="true"></span></a>
            <span>@Title</span>
        </div>
    </td>
    <td>
        @(isEnabled ? executionTime.ToString(@"hh\:mm") : "-")
    </td>
    <td>
        @(isEnabled ? string.Format("{0} ч. {1} мин.", nextExecution.ToString("hh"), nextExecution.ToString("mm")) : "-")
    </td>
    <td>
        @(lastExecution != default ? @lastExecution.ToString("dd.MM.yyyy HH:mm") : "-")
    </td>
</tr>

@code {
    Timer timeLeftRefresh;
    bool isEnabled;
    TimeSpan executionTime;
    DateTime lastExecution;
    TimeSpan nextExecution => executionTime < DateTime.Now.TimeOfDay ?
                             (DateTime.Now.AddDays(1).Date.AddTicks(executionTime.Ticks) - DateTime.Now) :
                             (executionTime - DateTime.Now.TimeOfDay);

    bool IsEnabled
    {
        get => isEnabled;
        set
        {
            isEnabled = value;
            timeLeftRefresh.Enabled = value;
        }
    }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Prefix { get; set; }

    protected override void OnParametersSet()
    {
        if(Prefix != null)
        {
            Prefix = System.Text.RegularExpressions.Regex.Replace(Prefix, "([A-Z])", "-$1").ToLower().Trim('-');
        }
    }

    protected override async Task OnInitializedAsync()
    {
        timeLeftRefresh = new Timer();
        timeLeftRefresh.Interval = TimeSpan.FromMinutes(1).TotalMilliseconds;
        timeLeftRefresh.Elapsed += (o, e) =>
        {
            InvokeAsync(() => StateHasChanged());
        };

        IsEnabled = (await settings.GetValue<bool>($"task_{Prefix}_active"));
        lastExecution = (await settings.GetValue<DateTime>($"task_{Prefix}_last_exec_date_time"));
        executionTime = (await settings.GetValue<TimeSpan>($"task_{Prefix}_exec_time"));
    }

    private async Task EnableStatusChanged(ChangeEventArgs e)
    {
        IsEnabled = (bool)e?.Value;
        await settings.SetValue($"task_{Prefix}_active", IsEnabled);

        StateHasChanged();
    }

    public void Dispose()
    {
        timeLeftRefresh?.Stop();
        timeLeftRefresh?.Dispose();
    }

}
