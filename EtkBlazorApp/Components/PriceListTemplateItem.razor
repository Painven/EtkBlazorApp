<div class="col-lg-2 col-md-3 col-sm-6 col-xs-12 price-list-template-outer"
     @onclick="BoxClicked">
    <div class="price-list-template-inner">
        <img class="brand-template-logo" src="@GroupImage" style="margin: 4px 8px 4px 2px;" />
        <ul class="price-list-template-group">
            @foreach (var item in Items)
            {
                <li>
                    <input type="radio" name="selected-price-list-group"
                           id="@item.Guid"
                           disabled="@IsTemplateAlreadyLoaded(item)"
                           checked="@(GlobalSelectedTemplate == item)"
                           @onchange="@(e => RadioButtonClicked(item))" />
                    @if (Items.Count > 1)
                    {
                        <label for="@item.Guid" style="font-size: 11px; margin-left: 6px;">@item.Title</label>
                    }
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Inject] PriceListManager priceListManager { get; set; }
    [Parameter] public List<PriceListTemplateItemViewModel> Items { get; set; }
    [Parameter] public EventCallback<PriceListTemplateItemViewModel> CheckedChanged { get; set; }
    [CascadingParameter] PriceListTemplateItemViewModel GlobalSelectedTemplate { get; set; }
    PriceListTemplateItemViewModel SelectedTemplate { get; set; }

    private string GroupName => Items.FirstOrDefault()?.GroupName;
    private string GroupImage => Items.FirstOrDefault()?.Image;

    private bool IsTemplateAlreadyLoaded(PriceListTemplateItemViewModel template)
    {
        return priceListManager.LoadedFiles.FirstOrDefault(lf => lf.Template.GetType() == template.Type) != null;
    }

    private async Task BoxClicked()
    {
        SelectedTemplate = Items.First();
        GlobalSelectedTemplate = SelectedTemplate;
        await CheckedChanged.InvokeAsync(SelectedTemplate);
    }

    private async Task RadioButtonClicked(PriceListTemplateItemViewModel item)
    {
        SelectedTemplate = item;
        GlobalSelectedTemplate = SelectedTemplate;
        await CheckedChanged.InvokeAsync(item);
    }

}
