@inject ISettingStorage settings

<li>
    <div class="task-tool-items-box">
        <input type="checkbox" @onchange="EnableStatusChanged" checked="@isEnabled" />
        <a href="@SettingsPageUri"><span class="oi oi-cog cog-icon" aria-hidden="true"></span></a>
        <span>@Title</span>
    </div>
    @if (lastExecution != default)
    {
        <p class="execution-cell">(последний запуск: <span style="color: blue;">@lastExecution.ToString("dd.MM.yyyy HH:mm")</span>)</p>
    }
    @if (isEnabled)
    {
        <p class="execution-cell">(следующее выполнение через: <span style="color: blue;">@(string.Format("{0} ч. {1} мин.", nextExecution.Hours, nextExecution.Minutes))</span>)</p>
    }
</li>

<style>
    .task-tool-items-box {
        display: inline-block;
        width: 100%;
    }
    .execution-cell {
        color: dimgray;
        margin: 4px auto;
        font-size: 11px;
        display: inline-block;
        text-align: right;
        width: auto;
    }
</style>

@code {
    bool isEnabled;
    TimeSpan executionTime;
    DateTime lastExecution;
    TimeSpan nextExecution => executionTime < DateTime.Now.TimeOfDay ?
                             (DateTime.Now.AddDays(1).Date.AddTicks(executionTime.Ticks) - DateTime.Now) :
                             (executionTime - DateTime.Now.TimeOfDay);

    [Parameter] public string Title { get; set; }
    [Parameter] public string SettingsPageUri { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isEnabled = (await settings.GetValue<bool>($"task_{Title.ToLower()}_active"));
        lastExecution = (await settings.GetValue<DateTime>($"task_{Title.ToLower()}_last_exec_date_time"));
        executionTime = (await settings.GetValue<TimeSpan>($"task_{Title.ToLower()}_exec_time"));
    }

    private async Task EnableStatusChanged(ChangeEventArgs e)
    {
        isEnabled = (bool)e?.Value;
        await settings.SetValue($"task_{Title.ToLower()}_active", isEnabled);

        StateHasChanged();
    }
}
