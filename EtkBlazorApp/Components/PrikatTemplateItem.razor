<tr style="opacity: @(Item.IsChecked ? "1" : "0.6");">
    <td width="5%">
        <input type="checkbox"
               style="display: inline-block;  margin: 2px 6px;"
               checked="@Item.IsChecked" 
               @onchange="@(e => { Item.IsChecked = !Item.IsChecked; Changed(); } )" />
    </td>
    <td width="35%">
        <p style="font-size: 15px; font-weight: bold; font-family: monospace;">@Item.Manufacturer</p>
    </td>

    @if (Item.IsChecked)
    {
        <td width="20%">
            <input type="number" class="form-control" 
                   value="@Item.Discount1" @onchange="@(e => { Item.Discount1 = int.Parse(e.Value.ToString()); Changed(); } )" />
        </td>
        <td width="20%">
            <input type="number" class="form-control"
                   value="@Item.Discount2" @onchange="@(e => { Item.Discount2 = int.Parse(e.Value.ToString()); Changed(); } )" />
        </td>
        <td width="20%">
            <select @onchange="@(e => { Item.CurrencyCode = (string)e.Value; Changed(); })" class="form-control">
                @foreach (var currencyCode in currencyCodeList)
                {
                    <option selected="@(currencyCode.Equals(Item.CurrencyCode))" value="@currencyCode">@currencyCode</option>
                }
            </select>
        </td>
    }
    else
    {
        <td width="20%"></td>
        <td width="20%"></td>
        <td width="20%"></td>
    }
</tr>
@if (ShowPriceExample && Item.IsChecked)
{
    <tr style="border-bottom: 2px solid black;">
        <td colspan="2">Пример цен</td>
        <td style="font-size: 0.8em;">@GetExampleStringPart(1)</td>
        <td  style="font-size: 0.8em;">@GetExampleStringPart(2)</td>
        <td></td>
    </tr>
}

@code {

    [Parameter]
    public PrikatManufacturerDiscountViewModel Item { get; set; }

    [Parameter]
    public EventCallback ItemChanged { get; set; }

    [CascadingParameter]
    public bool ShowPriceExample { get; set; }

    [CascadingParameter]
    public decimal ExamplePrice { get; set; }

    List<string> currencyCodeList = new List<string>(Enum.GetNames(typeof(CurrencyType)));

    private string GetExampleStringPart(int index)
    {
        decimal priceExample1 = (ExamplePrice * (decimal)(1 + ((decimal)Item.Discount1 / 100)));
        decimal priceExample2 = priceExample1 * (decimal)(1 + ((decimal)Item.Discount2 / 100));

        string sign1 = Math.Sign(Item.Discount1) < 0 ? "-" : "+";
        string sign2 = Math.Sign(Item.Discount2) < 0 ? "-" : "+";

        string part1 = $"{ExamplePrice} {sign1} {Math.Abs(Item.Discount1)}% = {priceExample1.ToString("N")}";
        string part2 = $"{priceExample1} {sign2} {Math.Abs(Item.Discount2)}% = {priceExample2.ToString("N")}";
        if(index == 1) { return part1; }
        if(index == 2) { return part2; }

        throw new ArgumentOutOfRangeException();
    }

    private void Changed()
    {
        ItemChanged.InvokeAsync();
        StateHasChanged();
    }
}
