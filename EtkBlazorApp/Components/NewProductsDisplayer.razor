@inject IProductStorage database

@if(products == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container">
        <div class="row">
            @foreach (var product in products)
            {
            <div class="col-md-3 product-item">
                @if (product.Price != 0)
                {
                    <p class="product-price">@product.Price.ToString("C0")</p>
                }
                <a href="@product.ProductIdUri" target="_blank">
                    <div class="product-item-inner shadow">
                        <div class="product-item-manufacturer">
                            <p>@product.Manufacturer</p>
                        </div>
                        <img src="@product.FullSizeImage" class="product-item-image" alt="@product.Name">

                        <div class="product-item-info">
                            <p class="product-name">@product.Name</p>
                        </div>
                    </div>
                </a>
            </div>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public int ProductsCount { get; set; } = 8;

    List<ProductViewModel> products = null;

    protected override async Task OnInitializedAsync()
    {
        if(ProductsCount >= 32)
        {
            ProductsCount = 32;
        }

        products = (await database.GetLastAddedProducts(ProductsCount))
            .Select(entity => new ProductViewModel()
            {
                FullSizeImage = "https://etk-komplekt.ru/image/" + entity.image,
                Name = entity.name ?? "Товар без назания",
                Manufacturer = entity.manufacturer,
                Price = entity.price,
                Uri = $"{entity.product_id}",
                Id = entity.product_id
            })
            .ToList();
    }
}
