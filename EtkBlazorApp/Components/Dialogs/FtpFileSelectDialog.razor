@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment appEnvironment

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog" style="background:rgba(0,0,0, 0.5)">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modal-title">@Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="() => FileSelected(null)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="files">Файлы</label>
                            <select class="form-control" id="files" @bind="SelectedFileRelativePath">
                                @foreach (var file in files.Select(f => f.Replace(appEnvironment.WebRootPath, string.Empty)))
                                {
                                    <option value="@file">@(Path.GetFileName(file))</option>
                                }
                            </select>
                        </div>
                        <hr/>
                        <div class="form-group">
                            <label for="upload-file">Загрузить файл</label>
                            <InputFile OnChange="UploadFileStateChanged"/>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                            @onclick="() => FileSelected(null)">
                        Отмена
                    </button>
                    <button type="button" class="btn btn-success"
                            @onclick="() => FileSelected(SelectedFileRelativePath)">
                        Выбрать файл
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    const int MAX_ALLOWED_FILE_SIZE_IN_BYTES = 2 * (1_000_000);

    bool ShowDialog { get; set; }
    string SelectedFileRelativePath { get; set; }
    List<string> files = new List<string>();

    [Parameter] public string Title { get; set; }
    [Parameter] public string InitialFolder { get; set; }

    protected override void OnInitialized()
    {
        InitialFolder = appEnvironment.WebRootPath + InitialFolder;
        if (Directory.Exists(InitialFolder))
        {
            files = Directory.GetFiles(InitialFolder)
                .Select(file => file)
                .OrderBy(file => file)
                .ToList();
        }
    }

    public void Show()
    {
        ShowDialog = true;
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    protected async Task FileSelected(string value)
    {
        ShowDialog = false;
        await OnChange.InvokeAsync(value);
    }

    protected async Task UploadFileStateChanged(InputFileChangeEventArgs e)
    {
        var relativePath = InitialFolder + e.File.Name;
        var fullPath = Path.Combine(appEnvironment.WebRootPath, relativePath);

        using (Stream stream = e.File.OpenReadStream(MAX_ALLOWED_FILE_SIZE_IN_BYTES))
        {
            using (FileStream fs = File.Create(fullPath))
            {
                await stream.CopyToAsync(fs);
            }
        }

        SelectedFileRelativePath = relativePath; 
        StateHasChanged();
    }
}

