@typeparam TItem

@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog" style="@cssBackground">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modal-title">@Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="() => OnConfirmationChange(default)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @ChildContent
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                            @onclick="() => OnConfirmationChange(default)">
                        Отмена
                    </button>
                    <button type="button" class="btn btn-success"
                            @onclick="() => OnConfirmationChange(Item)">
                        Сохранить
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    bool ShowConfirmation { get; set; }
    string cssBackground => $"background: rgba(0,0,0, {FadeOpacity.ToString("F2").Replace(",", ".")});";

    [Parameter] public double FadeOpacity { get; set; } = 0.5;
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public TItem Item { get; set; }

    public void Show()
    {
        ShowConfirmation = true;
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<TItem> ConfirmationChanged { get; set; }

    protected async Task OnConfirmationChange(TItem value)
    {
        ShowConfirmation = false;
        await ConfirmationChanged.InvokeAsync(value);
    }
}

